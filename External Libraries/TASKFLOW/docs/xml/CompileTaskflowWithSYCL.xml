<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="CompileTaskflowWithSYCL" kind="page">
    <compoundname>CompileTaskflowWithSYCL</compoundname>
    <title>Compile Taskflow with SYCL</title>
    <tableofcontents/>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="CompileTaskflowWithSYCL_1InstallSYCLCompiler">
<title>Install SYCL Compiler</title>
<para>To compile Taskflow with SYCL code, you need the DPC++ clang compiler, which can be acquired from <ulink url="https://intel.github.io/llvm-docs/GetStartedGuide.html">Getting Started with oneAPI DPC++</ulink>.</para></sect1>
<sect1 id="CompileTaskflowWithSYCL_1CompileTaskflowWithSYCLDirectly">
<title>Compile Source Code Directly</title>
<para>Taskflow&apos;s GPU programming interface for SYCL is <ref refid="classtf_1_1syclFlow" kindref="compound">tf::syclFlow</ref>. Consider the following <computeroutput>simple.cpp</computeroutput> program that performs the canonical saxpy (single-precision AX + Y) operation on a GPU:</para><para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="taskflow_8hpp" kindref="compound">taskflow/taskflow.hpp</ref>&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>core<sp/>taskflow<sp/>routines</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;taskflow/syclflow.hpp&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>core<sp/>syclflow<sp/>routines</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classtf_1_1Executor" kindref="compound">tf::Executor</ref><sp/>executor;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref><sp/>taskflow(</highlight><highlight class="stringliteral">&quot;saxpy<sp/>example&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sycl::queue<sp/>queue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>X<sp/>=<sp/>sycl::malloc_shared&lt;float&gt;(N,<sp/>queue);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Y<sp/>=<sp/>sycl::malloc_shared&lt;float&gt;(N,<sp/>queue);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>taskflow.<ref refid="classtf_1_1FlowBuilder_1afdf47fd1a358fb64f8c1b89e2a393169" kindref="member">emplace_on</ref>([&amp;](<ref refid="classtf_1_1syclFlow" kindref="compound">tf::syclFlow</ref>&amp;<sp/>sf){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtf_1_1syclTask" kindref="compound">tf::syclTask</ref><sp/>fillX<sp/>=<sp/>sf.<ref refid="classtf_1_1syclFlow_1a628843c986d60bea61eca8c48028159e" kindref="member">fill</ref>(X,<sp/>1.0f,<sp/>N).<ref refid="classtf_1_1syclTask_1a738dfa209da08d8783127a5c5654558e" kindref="member">name</ref>(</highlight><highlight class="stringliteral">&quot;fillX&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtf_1_1syclTask" kindref="compound">tf::syclTask</ref><sp/>fillY<sp/>=<sp/>sf.<ref refid="classtf_1_1syclFlow_1a628843c986d60bea61eca8c48028159e" kindref="member">fill</ref>(Y,<sp/>2.0f,<sp/>N).<ref refid="classtf_1_1syclTask_1a738dfa209da08d8783127a5c5654558e" kindref="member">name</ref>(</highlight><highlight class="stringliteral">&quot;fillY&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtf_1_1syclTask" kindref="compound">tf::syclTask</ref><sp/>saxpy<sp/>=<sp/>sf.<ref refid="classtf_1_1syclFlow_1ae42b1da441d5696dc589ee9ee89b9deb" kindref="member">parallel_for</ref>(sycl::range&lt;1&gt;(N),<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/>(sycl::id&lt;1&gt;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X[id]<sp/>=<sp/>3.0f<sp/>*<sp/>X[id]<sp/>+<sp/>Y[id];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>).name(</highlight><highlight class="stringliteral">&quot;saxpy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>saxpy.<ref refid="classtf_1_1syclTask_1a05f42a7fa26997193068ce6502eabe16" kindref="member">succeed</ref>(fillX,<sp/>fillY);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>},<sp/>queue).name(</highlight><highlight class="stringliteral">&quot;syclFlow&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>executor.<ref refid="classtf_1_1Executor_1a519777f5783981d534e9e53b99712069" kindref="member">run</ref>(taskflow).wait();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Use DPC++ clang to compile the program with the following options:</para><para><itemizedlist>
<listitem><para><computeroutput>-fsycl</computeroutput>: enable SYCL compilation mode </para></listitem>
<listitem><para><computeroutput>-fsycl-targets=nvptx64-nvidia-cuda-sycldevice</computeroutput>: enable CUDA target </para></listitem>
<listitem><para><computeroutput>-fsycl-unnamed-lambda</computeroutput>: enable unnamed SYCL lambda kernel</para></listitem>
</itemizedlist>
<programlisting filename=".shell-session"><codeline><highlight class="normal">~$<sp/>clang++<sp/>-fsycl<sp/>-fsycl-unnamed-lambda<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-fsycl-targets=nvptx64-nvidia-cuda-sycldevice<sp/>\<sp/><sp/>#<sp/>for<sp/>CUDA<sp/>target</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-I<sp/>path/to/taskflow<sp/>-pthread<sp/>-std=c++17<sp/>simple.cpp<sp/>-o<sp/>simple</highlight></codeline>
<codeline><highlight class="normal">~$<sp/>./simple</highlight></codeline>
</programlisting></para><para><simplesect kind="attention"><para>You need to include <computeroutput>taskflow/syclflow.hpp</computeroutput> in order to use <ref refid="classtf_1_1syclFlow" kindref="compound">tf::syclFlow</ref>.</para></simplesect>
</para></sect1>
<sect1 id="CompileTaskflowWithSYCL_1CompileTaskflowWithSYCLSeparately">
<title>Compile Source Code Separately</title>
<para>Large GPU applications often compile a program into separate objects and link them together to form an executable or a library. You can compile your SYCL code into separate object files and link them to form the final executable. Consider the following example that defines two tasks on two different pieces (<computeroutput>main.cpp</computeroutput> and <computeroutput>syclflow.cpp</computeroutput>) of source code:</para><para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>main.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="taskflow_8hpp" kindref="compound">taskflow/taskflow.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1Task" kindref="compound">tf::Task</ref><sp/>make_syclflow(<ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref>&amp;<sp/>taskflow);<sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>syclFlow<sp/>task</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classtf_1_1Executor" kindref="compound">tf::Executor</ref><sp/>executor;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref><sp/>taskflow;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classtf_1_1Task" kindref="compound">tf::Task</ref><sp/>task1<sp/>=<sp/>taskflow.<ref refid="classtf_1_1FlowBuilder_1a60d7a666cab71ecfa3010b2efb0d6b57" kindref="member">emplace</ref>([](){<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;main.cpp!\n&quot;</highlight><highlight class="normal">;<sp/>})</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.name(</highlight><highlight class="stringliteral">&quot;cpu<sp/>task&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classtf_1_1Task" kindref="compound">tf::Task</ref><sp/>task2<sp/>=<sp/>make_syclflow(taskflow);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task1.<ref refid="classtf_1_1Task_1a8c78c453295a553c1c016e4062da8588" kindref="member">precede</ref>(task2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>executor.<ref refid="classtf_1_1Executor_1a519777f5783981d534e9e53b99712069" kindref="member">run</ref>(taskflow).wait();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>syclflow.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="taskflow_8hpp" kindref="compound">taskflow/taskflow.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;taskflow/syclflow.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>sycl::queue<sp/>queue;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>global<sp/>sycl<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1Task" kindref="compound">tf::Task</ref><sp/>make_syclflow(<ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref>&amp;<sp/>taskflow)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>taskflow.<ref refid="classtf_1_1FlowBuilder_1afdf47fd1a358fb64f8c1b89e2a393169" kindref="member">emplace_on</ref>([](<ref refid="classtf_1_1syclFlow" kindref="compound">tf::syclFlow</ref>&amp;<sp/>cf){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cpp/io/c/fprintf" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">printf</ref>(</highlight><highlight class="stringliteral">&quot;syclflow.cpp!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cf.<ref refid="classtf_1_1syclFlow_1a05ff6f331b6cf48e21ae7f0d6aea9094" kindref="member">single_task</ref>([](){}).name(</highlight><highlight class="stringliteral">&quot;kernel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>},<sp/>queue).name(</highlight><highlight class="stringliteral">&quot;gpu<sp/>task&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Compile each source to an object using DPC++ clang:</para><para><programlisting filename=".shell-session"><codeline><highlight class="normal">~$<sp/>clang++<sp/>-I<sp/>path/to/taskflow/<sp/>-pthread<sp/>-std=c++17<sp/>-c<sp/>main.cpp<sp/>-o<sp/>main.o</highlight></codeline>
<codeline><highlight class="normal">~$<sp/>clang++<sp/>-fsycl<sp/>-fsycl-unnamed-lambda<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-fsycl-targets=nvptx64-nvidia-cuda-sycldevice<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-I<sp/>path/to/taskflow/<sp/>-pthread<sp/>-std=c++17<sp/>-c<sp/>syclflow.cpp<sp/>-o<sp/>syclflow.o</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>now<sp/>we<sp/>have<sp/>the<sp/>two<sp/>compiled<sp/>.o<sp/>objects,<sp/>main.o<sp/>and<sp/>syclflow.o</highlight></codeline>
<codeline><highlight class="normal">~$<sp/>ls</highlight></codeline>
<codeline><highlight class="normal">main.o<sp/>syclflow.o<sp/></highlight></codeline>
</programlisting></para><para>Next, link the two object files to the final executable:</para><para><programlisting filename=".shell-session"><codeline><highlight class="normal">~$<sp/>clang++<sp/>-fsycl<sp/>-fsycl-unnamed-lambda<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-fsycl-targets=nvptx64-nvidia-cuda-sycldevice<sp/>\<sp/><sp/>#<sp/>for<sp/>CUDA<sp/>target</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>main.o<sp/>syclflow.o<sp/>-pthread<sp/>-std=c++17<sp/>-o<sp/>main</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>run<sp/>the<sp/>main<sp/>program<sp/></highlight></codeline>
<codeline><highlight class="normal">~$<sp/>./main</highlight></codeline>
<codeline><highlight class="normal">main.cpp!</highlight></codeline>
<codeline><highlight class="normal">syclflow.cpp!</highlight></codeline>
</programlisting> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
