<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classtf_1_1cudaStream" kind="class" language="C++" prot="public">
    <compoundname>tf::cudaStream</compoundname>
    <includes refid="cuda__stream_8hpp" local="no">cuda_stream.hpp</includes>
    <innerclass refid="structtf_1_1cudaStream_1_1cudaStreamCreator" prot="private">tf::cudaStream::cudaStreamCreator</innerclass>
    <innerclass refid="structtf_1_1cudaStream_1_1cudaStreamDeleter" prot="private">tf::cudaStream::cudaStreamDeleter</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtf_1_1cudaStream_1aae075e080f811a4a90d5a24b42ea3f6e" prot="private" static="no" mutable="no">
        <type>cudaStream_t</type>
        <definition>cudaStream_t tf::cudaStream::_stream</definition>
        <argsstring></argsstring>
        <name>_stream</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="195" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" bodystart="195" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtf_1_1cudaStream_1ab29390d447e334d4945caf78b24d6ca6" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::cudaStream::cudaStream</definition>
        <argsstring>(cudaStream_t stream)</argsstring>
        <name>cudaStream</name>
        <param>
          <type>cudaStream_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>constructs an RAII-styled object from the given CUDA stream </para>        </briefdescription>
        <detaileddescription>
<para>Constructs a <ref refid="classtf_1_1cudaStream" kindref="compound">cudaStream</ref> object which owns <computeroutput>stream</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="50" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" bodystart="50" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaStream_1ada2ff649e58e8934ab521e5b436e7044" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::cudaStream::cudaStream</definition>
        <argsstring>()</argsstring>
        <name>cudaStream</name>
        <briefdescription>
<para>constructs an RAII-styled object for a new CUDA stream </para>        </briefdescription>
        <detaileddescription>
<para>Equivalently calling <computeroutput>cudaStreamCreate</computeroutput> to create a stream. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="58" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" bodystart="58" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaStream_1af3dcddcb21c077f0b425aa9b699a27c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tf::cudaStream::cudaStream</definition>
        <argsstring>(const cudaStream &amp;)=delete</argsstring>
        <name>cudaStream</name>
        <param>
          <type>const <ref refid="classtf_1_1cudaStream" kindref="compound">cudaStream</ref> &amp;</type>
        </param>
        <briefdescription>
<para>disabled copy constructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaStream_1af888fcab2b9b6e39a8270a4f6522f51c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::cudaStream::cudaStream</definition>
        <argsstring>(cudaStream &amp;&amp;rhs)</argsstring>
        <name>cudaStream</name>
        <param>
          <type><ref refid="classtf_1_1cudaStream" kindref="compound">cudaStream</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>move constructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="69" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaStream_1ac4b105d27894573adb41ff8b691499d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::cudaStream::~cudaStream</definition>
        <argsstring>()</argsstring>
        <name>~cudaStream</name>
        <briefdescription>
<para>destructs the CUDA stream </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="76" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" bodystart="76" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaStream_1a0b9304ac4f5e088dfb4a77a08233c9d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtf_1_1cudaStream" kindref="compound">cudaStream</ref> &amp;</type>
        <definition>cudaStream&amp; tf::cudaStream::operator=</definition>
        <argsstring>(const cudaStream &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classtf_1_1cudaStream" kindref="compound">cudaStream</ref> &amp;</type>
        </param>
        <briefdescription>
<para>disabled copy assignment </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaStream_1a4c3f85b9fe0e9a1504721b35a929650e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtf_1_1cudaStream" kindref="compound">cudaStream</ref> &amp;</type>
        <definition>cudaStream&amp; tf::cudaStream::operator=</definition>
        <argsstring>(cudaStream &amp;&amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classtf_1_1cudaStream" kindref="compound">cudaStream</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>move assignment </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="88" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" bodystart="88" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaStream_1ae8b74e156e740ab2d1b3ba305a9eef45" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::cudaStream::operator cudaStream_t</definition>
        <argsstring>() const</argsstring>
        <name>operator cudaStream_t</name>
        <briefdescription>
<para>implicit conversion to the native CUDA stream (cudaStream_t) </para>        </briefdescription>
        <detaileddescription>
<para>Returns the underlying stream of type <computeroutput>cudaStream_t</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="100" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" bodystart="100" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaStream_1a1a81d6005e8d60ad082dba2303a8aa30" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::cudaStream::synchronize</definition>
        <argsstring>() const</argsstring>
        <name>synchronize</name>
        <briefdescription>
<para>synchronizes the associated stream </para>        </briefdescription>
        <detaileddescription>
<para>Equivalently calling <computeroutput>cudaStreamSynchronize</computeroutput> to block until this stream has completed all operations. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="110" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" bodystart="110" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaStream_1ad98a025ff4306aa799e664a1e2aefd2e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::cudaStream::begin_capture</definition>
        <argsstring>(cudaStreamCaptureMode m=cudaStreamCaptureModeGlobal) const</argsstring>
        <name>begin_capture</name>
        <param>
          <type>cudaStreamCaptureMode</type>
          <declname>m</declname>
          <defval>cudaStreamCaptureModeGlobal</defval>
        </param>
        <briefdescription>
<para>begins graph capturing on the stream </para>        </briefdescription>
        <detaileddescription>
<para>When a stream is in capture mode, all operations pushed into the stream will not be executed, but will instead be captured into a graph, which will be returned via <ref refid="classtf_1_1cudaStream_1a9c48388031655cc691b267de96516a66" kindref="member">cudaStream::end_capture</ref>.</para><para>A thread&apos;s mode can be one of the following:<itemizedlist>
<listitem><para><computeroutput>cudaStreamCaptureModeGlobal:</computeroutput> This is the default mode. If the local thread has an ongoing capture sequence that was not initiated with <computeroutput>cudaStreamCaptureModeRelaxed</computeroutput> at <computeroutput>cuStreamBeginCapture</computeroutput>, or if any other thread has a concurrent capture sequence initiated with <computeroutput>cudaStreamCaptureModeGlobal</computeroutput>, this thread is prohibited from potentially unsafe API calls.</para></listitem><listitem><para><computeroutput>cudaStreamCaptureModeThreadLocal:</computeroutput> If the local thread has an ongoing capture sequence not initiated with <computeroutput>cudaStreamCaptureModeRelaxed</computeroutput>, it is prohibited from potentially unsafe API calls. Concurrent capture sequences in other threads are ignored.</para></listitem><listitem><para><computeroutput>cudaStreamCaptureModeRelaxed:</computeroutput> The local thread is not prohibited from potentially unsafe API calls. Note that the thread is still prohibited from API calls which necessarily conflict with stream capture, for example, attempting <computeroutput>cudaEventQuery</computeroutput> on an event that was last recorded inside a capture sequence. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="142" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" bodystart="142" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaStream_1a9c48388031655cc691b267de96516a66" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>cudaGraph_t</type>
        <definition>cudaGraph_t tf::cudaStream::end_capture</definition>
        <argsstring>() const</argsstring>
        <name>end_capture</name>
        <briefdescription>
<para>ends graph capturing on the stream </para>        </briefdescription>
        <detaileddescription>
<para>Equivalently calling <computeroutput>cudaStreamEndCapture</computeroutput> to end capture on stream and returning the captured graph. Capture must have been initiated on stream via a call to <ref refid="classtf_1_1cudaStream_1ad98a025ff4306aa799e664a1e2aefd2e" kindref="member">cudaStream::begin_capture</ref>. If capture was invalidated, due to a violation of the rules of stream capture, then a NULL graph will be returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="158" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" bodystart="158" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaStream_1a8343c234b4a3040b59626dc70e81d767" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::cudaStream::record</definition>
        <argsstring>(cudaEvent_t event) const</argsstring>
        <name>record</name>
        <param>
          <type>cudaEvent_t</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>records an event on the stream </para>        </briefdescription>
        <detaileddescription>
<para>Equivalently calling <computeroutput>cudaEventRecord</computeroutput> to record an event on this stream, both of which must be on the same CUDA context. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="173" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" bodystart="173" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaStream_1a6bb195945f7a580bec6105691c53c699" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::cudaStream::wait</definition>
        <argsstring>(cudaEvent_t event) const</argsstring>
        <name>wait</name>
        <param>
          <type>cudaEvent_t</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>waits on an event </para>        </briefdescription>
        <detaileddescription>
<para>Equivalently calling <computeroutput>cudaStreamWaitEvent</computeroutput> to make all future work submitted to stream wait for all work captured in event. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="186" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" bodystart="186" bodyend="191"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>class to create an RAII-styled wrapper over a native CUDA stream </para>    </briefdescription>
    <detaileddescription>
<para>A <ref refid="classtf_1_1cudaStream" kindref="compound">cudaStream</ref> object is an RAII-styled wrapper over a native CUDA stream (<computeroutput>cudaStream_t</computeroutput>). A <ref refid="classtf_1_1cudaStream" kindref="compound">cudaStream</ref> object is move-only. </para>    </detaileddescription>
    <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="25" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" bodystart="25" bodyend="196"/>
    <listofallmembers>
      <member refid="classtf_1_1cudaStream_1aae075e080f811a4a90d5a24b42ea3f6e" prot="private" virt="non-virtual"><scope>tf::cudaStream</scope><name>_stream</name></member>
      <member refid="classtf_1_1cudaStream_1ad98a025ff4306aa799e664a1e2aefd2e" prot="public" virt="non-virtual"><scope>tf::cudaStream</scope><name>begin_capture</name></member>
      <member refid="classtf_1_1cudaStream_1ab29390d447e334d4945caf78b24d6ca6" prot="public" virt="non-virtual"><scope>tf::cudaStream</scope><name>cudaStream</name></member>
      <member refid="classtf_1_1cudaStream_1ada2ff649e58e8934ab521e5b436e7044" prot="public" virt="non-virtual"><scope>tf::cudaStream</scope><name>cudaStream</name></member>
      <member refid="classtf_1_1cudaStream_1af3dcddcb21c077f0b425aa9b699a27c9" prot="public" virt="non-virtual"><scope>tf::cudaStream</scope><name>cudaStream</name></member>
      <member refid="classtf_1_1cudaStream_1af888fcab2b9b6e39a8270a4f6522f51c" prot="public" virt="non-virtual"><scope>tf::cudaStream</scope><name>cudaStream</name></member>
      <member refid="classtf_1_1cudaStream_1a9c48388031655cc691b267de96516a66" prot="public" virt="non-virtual"><scope>tf::cudaStream</scope><name>end_capture</name></member>
      <member refid="classtf_1_1cudaStream_1ae8b74e156e740ab2d1b3ba305a9eef45" prot="public" virt="non-virtual"><scope>tf::cudaStream</scope><name>operator cudaStream_t</name></member>
      <member refid="classtf_1_1cudaStream_1a0b9304ac4f5e088dfb4a77a08233c9d0" prot="public" virt="non-virtual"><scope>tf::cudaStream</scope><name>operator=</name></member>
      <member refid="classtf_1_1cudaStream_1a4c3f85b9fe0e9a1504721b35a929650e" prot="public" virt="non-virtual"><scope>tf::cudaStream</scope><name>operator=</name></member>
      <member refid="classtf_1_1cudaStream_1a8343c234b4a3040b59626dc70e81d767" prot="public" virt="non-virtual"><scope>tf::cudaStream</scope><name>record</name></member>
      <member refid="classtf_1_1cudaStream_1a1a81d6005e8d60ad082dba2303a8aa30" prot="public" virt="non-virtual"><scope>tf::cudaStream</scope><name>synchronize</name></member>
      <member refid="classtf_1_1cudaStream_1a6bb195945f7a580bec6105691c53c699" prot="public" virt="non-virtual"><scope>tf::cudaStream</scope><name>wait</name></member>
      <member refid="classtf_1_1cudaStream_1ac4b105d27894573adb41ff8b691499d9" prot="public" virt="non-virtual"><scope>tf::cudaStream</scope><name>~cudaStream</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
