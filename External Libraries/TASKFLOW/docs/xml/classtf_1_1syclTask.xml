<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classtf_1_1syclTask" kind="class" language="C++" prot="public">
    <compoundname>tf::syclTask</compoundname>
    <includes refid="sycl__task_8hpp" local="no">sycl_task.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classtf_1_1syclTask_1a455510eca2667dc9fbd73f542cca61a2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class syclFlow</definition>
        <argsstring></argsstring>
        <name>syclFlow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" line="23" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classtf_1_1syclTask_1adea2160a46a454fec7ed58978aadba6a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const syclTask &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <defname>os</defname>
        </param>
        <param>
          <type>const <ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref> &amp;</type>
          <defname>ct</defname>
        </param>
        <briefdescription>
<para>overload of ostream inserter operator for <ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" line="25" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" bodystart="201" bodyend="204"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtf_1_1syclTask_1afed4d6988d2de4e021768ef7d8752920" prot="private" static="no" mutable="no">
        <type>syclNode *</type>
        <definition>syclNode* tf::syclTask::_node</definition>
        <argsstring></argsstring>
        <name>_node</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" line="122" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" bodystart="122" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtf_1_1syclTask_1aed88e7a2d203ebe7fc53725e3e79d5d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tf::syclTask::syclTask</definition>
        <argsstring>()=default</argsstring>
        <name>syclTask</name>
        <briefdescription>
<para>constructs an empty <ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" line="32" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclTask_1a4f3bdbf7b409b25827cdab009273a3d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tf::syclTask::syclTask</definition>
        <argsstring>(const syclTask &amp;)=default</argsstring>
        <name>syclTask</name>
        <param>
          <type>const <ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref> &amp;</type>
        </param>
        <briefdescription>
<para>copy-constructs a <ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclTask_1a2a850da5b3e34050e12aa554b5d9b8d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref> &amp;</type>
        <definition>syclTask&amp; tf::syclTask::operator=</definition>
        <argsstring>(const syclTask &amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref> &amp;</type>
        </param>
        <briefdescription>
<para>copy-assigns a <ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclTask_1a92d0dd0929b9ac4e46baf4d546497389" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref> &amp;</type>
        <definition>syclTask &amp; tf::syclTask::precede</definition>
        <argsstring>(Ts &amp;&amp;... tasks)</argsstring>
        <name>precede</name>
        <param>
          <type>Ts &amp;&amp;...</type>
          <declname>tasks</declname>
        </param>
        <briefdescription>
<para>adds precedence links from this to other tasks </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Ts</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter pack</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tasks</parametername>
</parameternamelist>
<parameterdescription>
<para>one or multiple tasks</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>*this</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" line="54" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclTask_1a05f42a7fa26997193068ce6502eabe16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref> &amp;</type>
        <definition>syclTask &amp; tf::syclTask::succeed</definition>
        <argsstring>(Ts &amp;&amp;... tasks)</argsstring>
        <name>succeed</name>
        <param>
          <type>Ts &amp;&amp;...</type>
          <declname>tasks</declname>
        </param>
        <briefdescription>
<para>adds precedence links from other tasks to this </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Ts</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter pack</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tasks</parametername>
</parameternamelist>
<parameterdescription>
<para>one or multiple tasks</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>*this</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" line="66" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" bodystart="138" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclTask_1a738dfa209da08d8783127a5c5654558e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref> &amp;</type>
        <definition>syclTask &amp; tf::syclTask::name</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>name</name>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>assigns a name to the task </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ulink url="https://en.cppreference.com/w/cpp/string/basic_string">std::string</ulink> acceptable string</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>*this</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" line="75" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclTask_1ae44a15b3b71bd3be7f7a2f1b858494c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
        <definition>const std::string &amp; tf::syclTask::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <briefdescription>
<para>queries the name of the task </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" line="80" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" bodystart="155" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclTask_1a00c8c7e319ca9c31e9215495081e2c57" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::syclTask::num_successors</definition>
        <argsstring>() const</argsstring>
        <name>num_successors</name>
        <briefdescription>
<para>queries the number of successors </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" line="85" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" bodystart="160" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclTask_1abb11596c5139e9799c784235e09a6702" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::syclTask::num_dependents</definition>
        <argsstring>() const</argsstring>
        <name>num_dependents</name>
        <briefdescription>
<para>queries the number of dependents </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" line="90" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" bodystart="165" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclTask_1ab19b1cf3d70dd6ae46c314edb2926ed7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tf::syclTask::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
<para>queries if the task is associated with a syclNode </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" line="95" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" bodystart="144" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclTask_1a7a84186fba14d57e19085b651589ea55" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::syclTask::dump</definition>
        <argsstring>(T &amp;ostream) const</argsstring>
        <name>dump</name>
        <param>
          <type>T &amp;</type>
          <declname>ostream</declname>
        </param>
        <briefdescription>
<para>dumps the task through an output stream </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>output stream type with insertion operator (&lt;&lt;) defined </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ostream</parametername>
</parameternamelist>
<parameterdescription>
<para>an output stream target </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" line="104" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" bodystart="171" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclTask_1ab097ffc44e4dbcab2bdf0bf0fd710dd1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::syclTask::for_each_successor</definition>
        <argsstring>(V &amp;&amp;visitor) const</argsstring>
        <name>for_each_successor</name>
        <param>
          <type>V &amp;&amp;</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
<para>applies an visitor callable to each successor of the task </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" line="110" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" bodystart="179" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclTask_1aedcbf879ff4aef14e1791414042a090e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::syclTask::for_each_dependent</definition>
        <argsstring>(V &amp;&amp;visitor) const</argsstring>
        <name>for_each_dependent</name>
        <param>
          <type>V &amp;&amp;</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
<para>applies an visitor callable to each dependents of the task </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" line="116" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" bodystart="187" bodyend="191"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtf_1_1syclTask_1aff90c8acb345489c609bda0e223979e9" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::syclTask::syclTask</definition>
        <argsstring>(syclNode *)</argsstring>
        <name>syclTask</name>
        <param>
          <type>syclNode *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" line="120" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" bodystart="126" bodyend="127"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>handle to a node of the internal CUDA graph </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" line="21" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/sycl_task.hpp" bodystart="21" bodyend="123"/>
    <listofallmembers>
      <member refid="classtf_1_1syclTask_1afed4d6988d2de4e021768ef7d8752920" prot="private" virt="non-virtual"><scope>tf::syclTask</scope><name>_node</name></member>
      <member refid="classtf_1_1syclTask_1a7a84186fba14d57e19085b651589ea55" prot="public" virt="non-virtual"><scope>tf::syclTask</scope><name>dump</name></member>
      <member refid="classtf_1_1syclTask_1ab19b1cf3d70dd6ae46c314edb2926ed7" prot="public" virt="non-virtual"><scope>tf::syclTask</scope><name>empty</name></member>
      <member refid="classtf_1_1syclTask_1aedcbf879ff4aef14e1791414042a090e" prot="public" virt="non-virtual"><scope>tf::syclTask</scope><name>for_each_dependent</name></member>
      <member refid="classtf_1_1syclTask_1ab097ffc44e4dbcab2bdf0bf0fd710dd1" prot="public" virt="non-virtual"><scope>tf::syclTask</scope><name>for_each_successor</name></member>
      <member refid="classtf_1_1syclTask_1a738dfa209da08d8783127a5c5654558e" prot="public" virt="non-virtual"><scope>tf::syclTask</scope><name>name</name></member>
      <member refid="classtf_1_1syclTask_1ae44a15b3b71bd3be7f7a2f1b858494c9" prot="public" virt="non-virtual"><scope>tf::syclTask</scope><name>name</name></member>
      <member refid="classtf_1_1syclTask_1abb11596c5139e9799c784235e09a6702" prot="public" virt="non-virtual"><scope>tf::syclTask</scope><name>num_dependents</name></member>
      <member refid="classtf_1_1syclTask_1a00c8c7e319ca9c31e9215495081e2c57" prot="public" virt="non-virtual"><scope>tf::syclTask</scope><name>num_successors</name></member>
      <member refid="classtf_1_1syclTask_1adea2160a46a454fec7ed58978aadba6a" prot="private" virt="non-virtual"><scope>tf::syclTask</scope><name>operator&lt;&lt;</name></member>
      <member refid="classtf_1_1syclTask_1a2a850da5b3e34050e12aa554b5d9b8d5" prot="public" virt="non-virtual"><scope>tf::syclTask</scope><name>operator=</name></member>
      <member refid="classtf_1_1syclTask_1a92d0dd0929b9ac4e46baf4d546497389" prot="public" virt="non-virtual"><scope>tf::syclTask</scope><name>precede</name></member>
      <member refid="classtf_1_1syclTask_1a05f42a7fa26997193068ce6502eabe16" prot="public" virt="non-virtual"><scope>tf::syclTask</scope><name>succeed</name></member>
      <member refid="classtf_1_1syclTask_1a455510eca2667dc9fbd73f542cca61a2" prot="private" virt="non-virtual"><scope>tf::syclTask</scope><name>syclFlow</name></member>
      <member refid="classtf_1_1syclTask_1aed88e7a2d203ebe7fc53725e3e79d5d0" prot="public" virt="non-virtual"><scope>tf::syclTask</scope><name>syclTask</name></member>
      <member refid="classtf_1_1syclTask_1a4f3bdbf7b409b25827cdab009273a3d9" prot="public" virt="non-virtual"><scope>tf::syclTask</scope><name>syclTask</name></member>
      <member refid="classtf_1_1syclTask_1aff90c8acb345489c609bda0e223979e9" prot="private" virt="non-virtual"><scope>tf::syclTask</scope><name>syclTask</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
