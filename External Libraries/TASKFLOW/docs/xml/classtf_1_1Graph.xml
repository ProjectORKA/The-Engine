<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classtf_1_1Graph" kind="class" language="C++" prot="public">
    <compoundname>tf::Graph</compoundname>
    <includes refid="graph_8hpp" local="no">graph.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classtf_1_1Graph_1a6db9d28bd448a131448276ee03de1e6d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Node</definition>
        <argsstring></argsstring>
        <name>Node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" line="58" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classtf_1_1Graph_1a61184f9bd9c801d0a5eccecfdbddc641" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class FlowBuilder</definition>
        <argsstring></argsstring>
        <name>FlowBuilder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" line="59" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classtf_1_1Graph_1aa48945297ede77a161defc88033ce8a6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Subflow</definition>
        <argsstring></argsstring>
        <name>Subflow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" line="60" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classtf_1_1Graph_1af043dd6f6a359602805d9c7dd7539cca" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Taskflow</definition>
        <argsstring></argsstring>
        <name>Taskflow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" line="61" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classtf_1_1Graph_1a763b2f90bc53f92d680a635fe28e858e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Executor</definition>
        <argsstring></argsstring>
        <name>Executor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" line="62" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtf_1_1Graph_1ac5e4c434ae03bf37c5a275f9fdc9f97d" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; Node * &gt;</type>
        <definition>std::vector&lt;Node*&gt; tf::Graph::_nodes</definition>
        <argsstring></argsstring>
        <name>_nodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" line="113" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtf_1_1Graph_1a1cd3bae8cabb45810b25cdbdd4e89006" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tf::Graph::Graph</definition>
        <argsstring>()=default</argsstring>
        <name>Graph</name>
        <briefdescription>
<para>constructs a graph object </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Graph_1ade95936f49af81b9834e09e807033e61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tf::Graph::Graph</definition>
        <argsstring>(const Graph &amp;)=delete</argsstring>
        <name>Graph</name>
        <param>
          <type>const <ref refid="classtf_1_1Graph" kindref="compound">Graph</ref> &amp;</type>
        </param>
        <briefdescription>
<para>disabled copy constructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Graph_1a5fcaca536e67632ff6dd3cf2c0284cfd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::Graph::Graph</definition>
        <argsstring>(Graph &amp;&amp;)</argsstring>
        <name>Graph</name>
        <param>
          <type><ref refid="classtf_1_1Graph" kindref="compound">Graph</ref> &amp;&amp;</type>
          <defname>other</defname>
        </param>
        <briefdescription>
<para>constructs a graph using move semantics </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" line="79" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" bodystart="732" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Graph_1a493acc70cca8c0a09d7c407d28c59ee2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::Graph::~Graph</definition>
        <argsstring>()</argsstring>
        <name>~Graph</name>
        <briefdescription>
<para>destructs the graph object </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" line="84" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" bodystart="727" bodyend="729"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Graph_1a945eb240dd5d6840e282c525a1ea74e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtf_1_1Graph" kindref="compound">Graph</ref> &amp;</type>
        <definition>Graph&amp; tf::Graph::operator=</definition>
        <argsstring>(const Graph &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classtf_1_1Graph" kindref="compound">Graph</ref> &amp;</type>
        </param>
        <briefdescription>
<para>disabled copy assignment operator </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Graph_1a9104e2edd9e02c64d0102378f81ed9a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtf_1_1Graph" kindref="compound">Graph</ref> &amp;</type>
        <definition>Graph &amp; tf::Graph::operator=</definition>
        <argsstring>(Graph &amp;&amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classtf_1_1Graph" kindref="compound">Graph</ref> &amp;&amp;</type>
          <defname>other</defname>
        </param>
        <briefdescription>
<para>assigns a graph using move semantics </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" line="94" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" bodystart="737" bodyend="741"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Graph_1a30750e1be2657e491854791cd3afff06" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tf::Graph::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
<para>queries if the graph is empty </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" line="99" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" bodystart="791" bodyend="793"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Graph_1a790710289553897fa88672d9104d8ed1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::Graph::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>queries the number of nodes in the graph </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" line="104" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" bodystart="786" bodyend="788"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Graph_1a8213e42bf3f7460757db411181d78c4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Graph::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>clears the graph </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" line="109" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" bodystart="744" bodyend="746"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtf_1_1Graph_1a13b297fdc502102ee784495f6d4c3d1e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Graph::_clear</definition>
        <argsstring>()</argsstring>
        <name>_clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" line="115" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" bodystart="749" bodyend="754"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Graph_1ace2898fcb8cd86099dbf5d453a9cf0b4" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Graph::_clear_detached</definition>
        <argsstring>()</argsstring>
        <name>_clear_detached</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" line="116" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" bodystart="757" bodyend="767"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Graph_1a39d26ac29a3aa19650dcf31a7563b6ee" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Graph::_merge</definition>
        <argsstring>(Graph &amp;&amp;)</argsstring>
        <name>_merge</name>
        <param>
          <type><ref refid="classtf_1_1Graph" kindref="compound">Graph</ref> &amp;&amp;</type>
          <defname>g</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" line="117" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" bodystart="770" bodyend="775"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Graph_1a6b50ab0846fe1720edc2dcc5147ba16b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Graph::_erase</definition>
        <argsstring>(Node *)</argsstring>
        <name>_erase</name>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" line="118" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" bodystart="778" bodyend="783"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Graph_1ab804f1d7061f031df585a1b0ae15128d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ...</type>
            <declname>ArgsT</declname>
            <defname>ArgsT</defname>
          </param>
        </templateparamlist>
        <type>Node *</type>
        <definition>Node * tf::Graph::_emplace_back</definition>
        <argsstring>(ArgsT &amp;&amp;... args)</argsstring>
        <name>_emplace_back</name>
        <param>
          <type>ArgsT &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" line="121" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" bodystart="797" bodyend="800"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Graph_1aed34729a3fbafdc2f328cab4ed0fcabb" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Node *</type>
        <definition>Node * tf::Graph::_emplace_back</definition>
        <argsstring>()</argsstring>
        <name>_emplace_back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" line="123" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" bodystart="803" bodyend="806"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>class to create a graph object </para>    </briefdescription>
    <detaileddescription>
<para>A graph is the ultimate storage for a task dependency graph and is the main gateway to interact with an executor. A graph manages a set of nodes in a global object pool that animates and recycles node objects efficiently without going through repetitive and expensive memory allocations and deallocations. This class is mainly used for creating an opaque graph object in a custom class to interact with the executor through taskflow composition.</para><para>A graph object is move-only. </para>    </detaileddescription>
    <location file="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" line="56" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/graph.hpp" bodystart="56" bodyend="124"/>
    <listofallmembers>
      <member refid="classtf_1_1Graph_1a13b297fdc502102ee784495f6d4c3d1e" prot="private" virt="non-virtual"><scope>tf::Graph</scope><name>_clear</name></member>
      <member refid="classtf_1_1Graph_1ace2898fcb8cd86099dbf5d453a9cf0b4" prot="private" virt="non-virtual"><scope>tf::Graph</scope><name>_clear_detached</name></member>
      <member refid="classtf_1_1Graph_1ab804f1d7061f031df585a1b0ae15128d" prot="private" virt="non-virtual"><scope>tf::Graph</scope><name>_emplace_back</name></member>
      <member refid="classtf_1_1Graph_1aed34729a3fbafdc2f328cab4ed0fcabb" prot="private" virt="non-virtual"><scope>tf::Graph</scope><name>_emplace_back</name></member>
      <member refid="classtf_1_1Graph_1a6b50ab0846fe1720edc2dcc5147ba16b" prot="private" virt="non-virtual"><scope>tf::Graph</scope><name>_erase</name></member>
      <member refid="classtf_1_1Graph_1a39d26ac29a3aa19650dcf31a7563b6ee" prot="private" virt="non-virtual"><scope>tf::Graph</scope><name>_merge</name></member>
      <member refid="classtf_1_1Graph_1ac5e4c434ae03bf37c5a275f9fdc9f97d" prot="private" virt="non-virtual"><scope>tf::Graph</scope><name>_nodes</name></member>
      <member refid="classtf_1_1Graph_1a8213e42bf3f7460757db411181d78c4c" prot="public" virt="non-virtual"><scope>tf::Graph</scope><name>clear</name></member>
      <member refid="classtf_1_1Graph_1a30750e1be2657e491854791cd3afff06" prot="public" virt="non-virtual"><scope>tf::Graph</scope><name>empty</name></member>
      <member refid="classtf_1_1Graph_1a763b2f90bc53f92d680a635fe28e858e" prot="private" virt="non-virtual"><scope>tf::Graph</scope><name>Executor</name></member>
      <member refid="classtf_1_1Graph_1a61184f9bd9c801d0a5eccecfdbddc641" prot="private" virt="non-virtual"><scope>tf::Graph</scope><name>FlowBuilder</name></member>
      <member refid="classtf_1_1Graph_1a1cd3bae8cabb45810b25cdbdd4e89006" prot="public" virt="non-virtual"><scope>tf::Graph</scope><name>Graph</name></member>
      <member refid="classtf_1_1Graph_1ade95936f49af81b9834e09e807033e61" prot="public" virt="non-virtual"><scope>tf::Graph</scope><name>Graph</name></member>
      <member refid="classtf_1_1Graph_1a5fcaca536e67632ff6dd3cf2c0284cfd" prot="public" virt="non-virtual"><scope>tf::Graph</scope><name>Graph</name></member>
      <member refid="classtf_1_1Graph_1a6db9d28bd448a131448276ee03de1e6d" prot="private" virt="non-virtual"><scope>tf::Graph</scope><name>Node</name></member>
      <member refid="classtf_1_1Graph_1a945eb240dd5d6840e282c525a1ea74e4" prot="public" virt="non-virtual"><scope>tf::Graph</scope><name>operator=</name></member>
      <member refid="classtf_1_1Graph_1a9104e2edd9e02c64d0102378f81ed9a9" prot="public" virt="non-virtual"><scope>tf::Graph</scope><name>operator=</name></member>
      <member refid="classtf_1_1Graph_1a790710289553897fa88672d9104d8ed1" prot="public" virt="non-virtual"><scope>tf::Graph</scope><name>size</name></member>
      <member refid="classtf_1_1Graph_1aa48945297ede77a161defc88033ce8a6" prot="private" virt="non-virtual"><scope>tf::Graph</scope><name>Subflow</name></member>
      <member refid="classtf_1_1Graph_1af043dd6f6a359602805d9c7dd7539cca" prot="private" virt="non-virtual"><scope>tf::Graph</scope><name>Taskflow</name></member>
      <member refid="classtf_1_1Graph_1a493acc70cca8c0a09d7c407d28c59ee2" prot="public" virt="non-virtual"><scope>tf::Graph</scope><name>~Graph</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
