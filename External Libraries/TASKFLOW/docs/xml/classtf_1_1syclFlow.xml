<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classtf_1_1syclFlow" kind="class" language="C++" prot="public">
    <compoundname>tf::syclFlow</compoundname>
    <includes refid="syclflow_8hpp" local="no">syclflow.hpp</includes>
    <innerclass refid="structtf_1_1syclFlow_1_1External" prot="private">tf::syclFlow::External</innerclass>
    <innerclass refid="structtf_1_1syclFlow_1_1Internal" prot="private">tf::syclFlow::Internal</innerclass>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classtf_1_1syclFlow_1a946b048dd1f13121d8998d8d943e216e" prot="private" static="no">
        <type>std::variant&lt; External, Internal &gt;</type>
        <definition>using tf::syclFlow::handle_t =  std::variant&lt;External, Internal&gt;</definition>
        <argsstring></argsstring>
        <name>handle_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="36" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classtf_1_1syclFlow_1a763b2f90bc53f92d680a635fe28e858e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Executor</definition>
        <argsstring></argsstring>
        <name>Executor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="25" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtf_1_1syclFlow_1a5728aaf61105ae3ee37eaddb24c1008d" prot="private" static="no" mutable="no">
        <type>sycl::queue &amp;</type>
        <definition>sycl::queue&amp; tf::syclFlow::_queue</definition>
        <argsstring></argsstring>
        <name>_queue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="411" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1syclFlow_1ae1d0a6dc43a4a28080db9577599fa3fa" prot="private" static="no" mutable="no">
        <type>handle_t</type>
        <definition>handle_t tf::syclFlow::_handle</definition>
        <argsstring></argsstring>
        <name>_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="413" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1syclFlow_1ad686b504d6ea0edbef8e2be9d57e63c8" prot="private" static="no" mutable="no">
        <type>syclGraph &amp;</type>
        <definition>syclGraph&amp; tf::syclFlow::_graph</definition>
        <argsstring></argsstring>
        <name>_graph</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="415" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="415" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1syclFlow_1ab16047aa143c6ed5bbfbff91488251ab" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; syclNode * &gt;</type>
        <definition>std::vector&lt;syclNode*&gt; tf::syclFlow::_tpg</definition>
        <argsstring></argsstring>
        <name>_tpg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="417" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1syclFlow_1ab67081d930e69106d1c2b69994a9ebd8" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/container/queue" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::queue</ref>&lt; syclNode * &gt;</type>
        <definition>std::queue&lt;syclNode*&gt; tf::syclFlow::_bfs</definition>
        <argsstring></argsstring>
        <name>_bfs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="418" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="418" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtf_1_1syclFlow_1aca4297c5bcf7f6e3c59e43415afb0ebd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::syclFlow::syclFlow</definition>
        <argsstring>(sycl::queue &amp;queue)</argsstring>
        <name>syclFlow</name>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
<para>constructs a standalone syclFlow from the given queue </para>        </briefdescription>
        <detaileddescription>
<para>A standalone syclFlow does not go through any taskflow and can be run by the caller thread using explicit offload methods (e.g., <ref refid="classtf_1_1syclFlow_1a2928c2edc466dd625741080c147de4ef" kindref="member">tf::syclFlow::offload</ref>). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="47" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="422" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclFlow_1a2dec29bec12f5270893f5d44b2fd79bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tf::syclFlow::~syclFlow</definition>
        <argsstring>()=default</argsstring>
        <name>~syclFlow</name>
        <briefdescription>
<para>destroys the syclFlow </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclFlow_1a0e33d2d4f26e52a55690d17f77d467b0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tf::syclFlow::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
<para>queries the emptiness of the graph </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="57" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="436" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclFlow_1aedcc6b3363f98c68762e7fb32ea45406" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::syclFlow::num_tasks</definition>
        <argsstring>() const</argsstring>
        <name>num_tasks</name>
        <briefdescription>
<para>queries the number of tasks </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="62" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="441" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclFlow_1a6284f266b5d603fbecd148304c107dc6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::syclFlow::dump</definition>
        <argsstring>(std::ostream &amp;os) const</argsstring>
        <name>dump</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>dumps the syclFlow graph into a DOT format through an output stream </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="68" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="446" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclFlow_1a4d07f698f4defa3f8c0600c5c2f64c1c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::syclFlow::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>clear the associated graph </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="73" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="451" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclFlow_1a20b79581d27eaed2812ffb14dc821a64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_invocable_r_v&lt; void, F, sycl::handler &amp;&gt;, void &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref></type>
        <definition>syclTask tf::syclFlow::on</definition>
        <argsstring>(F &amp;&amp;func)</argsstring>
        <name>on</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>creates a task that launches the given command group function object </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>type of command group function object </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>function object that is constructible from std::function&lt;void(sycl::handler&amp;)&gt;</para></parameterdescription>
</parameteritem>
</parameterlist>
Creates a task that is associated from the given command group. In SYCL, each command group function object is given a unique command group handler object to perform all the necessary work required to correctly process data on a device using a kernel. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="94" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="483" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclFlow_1a24827902c99771ecff1cfeb88d639af0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_invocable_r_v&lt; void, F, sycl::handler &amp;&gt;, void &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::syclFlow::on</definition>
        <argsstring>(syclTask task, F &amp;&amp;func)</argsstring>
        <name>on</name>
        <param>
          <type><ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>updates the task to the given command group function object </para>        </briefdescription>
        <detaileddescription>
<para>Similar to <ref refid="classtf_1_1syclFlow_1a20b79581d27eaed2812ffb14dc821a64" kindref="member">tf::syclFlow::on</ref> but operates on an existing task. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="104" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="582" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclFlow_1ac1e1eb858d9271ed61ff4fe00f135e92" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref></type>
        <definition>syclTask tf::syclFlow::memcpy</definition>
        <argsstring>(void *tgt, const void *src, size_t bytes)</argsstring>
        <name>memcpy</name>
        <param>
          <type>void *</type>
          <declname>tgt</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>creates a memcpy task that copies untyped data in bytes </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tgt</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the target memory block </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the source memory block </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>bytes to copy</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1syclTask" kindref="compound">tf::syclTask</ref> handle</para></simplesect>
A memcpy task transfers <computeroutput>bytes</computeroutput> of data from a source locationA <computeroutput>src</computeroutput> to a target location <computeroutput>tgt</computeroutput>. Both <computeroutput>src</computeroutput> and <computeroutput>tgt</computeroutput> may be either host or USM pointers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="119" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="456" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclFlow_1a54b7497c0f4763bb4f8604f6c5654a5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref></type>
        <definition>syclTask tf::syclFlow::memset</definition>
        <argsstring>(void *ptr, int value, size_t bytes)</argsstring>
        <name>memset</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>creates a memset task that fills untyped data with a byte value </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the destination device memory area </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to set for each byte of specified memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to set</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1syclTask" kindref="compound">tf::syclTask</ref> handle</para></simplesect>
Fills <computeroutput>bytes</computeroutput> of memory beginning at address <computeroutput>ptr</computeroutput> with <computeroutput>value</computeroutput>. <computeroutput>ptr</computeroutput> must be a USM allocation. <computeroutput>value</computeroutput> is interpreted as an unsigned char. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="134" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="461" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclFlow_1a628843c986d60bea61eca8c48028159e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref></type>
        <definition>syclTask tf::syclFlow::fill</definition>
        <argsstring>(void *ptr, const T &amp;pattern, size_t count)</argsstring>
        <name>fill</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>pattern</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>creates a fill task that fills typed data with the given value </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>trivially copyable value type</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the memory to fill </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>pattern value to fill into the memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>number of items to fill the value</para></parameterdescription>
</parameteritem>
</parameterlist>
Creates a task that fills the specified memory with the specified value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="149" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="467" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclFlow_1ac433456f3960028fb12a53018b263aee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_same_v&lt; T, void &gt;, void &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref></type>
        <definition>syclTask tf::syclFlow::copy</definition>
        <argsstring>(T *target, const T *source, size_t count)</argsstring>
        <name>copy</name>
        <param>
          <type>T *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>creates a copy task that copies typed data from a source to a target memory block </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>trivially copyable value type</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the memory to fill </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the pattern value to fill into the memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>number of items to fill the value</para></parameterdescription>
</parameteritem>
</parameterlist>
Creates a task that copies <computeroutput>count</computeroutput> items of type <computeroutput>T</computeroutput> from a source memory location to a target memory location. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="167" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="475" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclFlow_1ae42b1da441d5696dc589ee9ee89b9deb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>ArgsT</declname>
            <defname>ArgsT</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref></type>
        <definition>syclTask tf::syclFlow::parallel_for</definition>
        <argsstring>(ArgsT &amp;&amp;... args)</argsstring>
        <name>parallel_for</name>
        <param>
          <type>ArgsT &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>creates a kernel task </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ArgsT</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments types</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments to forward to the parallel_for methods defined in the handler object</para></parameterdescription>
</parameteritem>
</parameterlist>
Creates a kernel task from a parallel_for method through the handler object associated with a command group. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="181" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="500" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclFlow_1a05ff6f331b6cf48e21ae7f0d6aea9094" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref></type>
        <definition>syclTask tf::syclFlow::single_task</definition>
        <argsstring>(F &amp;&amp;func)</argsstring>
        <name>single_task</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>invokes a SYCL kernel function using only one thread </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>kernel function type </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>kernel function</para></parameterdescription>
</parameteritem>
</parameterlist>
Creates a task that launches the given function object using only one kernel thread. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="197" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="492" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclFlow_1a30c3f7a279d1f88b6052f7ded1ee381a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref></type>
        <definition>syclTask tf::syclFlow::for_each</definition>
        <argsstring>(I first, I last, C &amp;&amp;callable)</argsstring>
        <name>for_each</name>
        <param>
          <type>I</type>
          <declname>first</declname>
        </param>
        <param>
          <type>I</type>
          <declname>last</declname>
        </param>
        <param>
          <type>C &amp;&amp;</type>
          <declname>callable</declname>
        </param>
        <briefdescription>
<para>applies a callable to each dereferenced element of the data array </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>I</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>C</parametername>
</parameternamelist>
<parameterdescription>
<para>callable type</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator to the beginning (inclusive) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator to the end (exclusive) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callable</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object to apply to the dereferenced iterator</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1syclTask" kindref="compound">tf::syclTask</ref> handle</para></simplesect>
This method is equivalent to the parallel execution of the following loop on a GPU:</para><para><programlisting filename=".cpp"><codeline><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>itr<sp/>=<sp/>first;<sp/>itr<sp/>!=<sp/>last;<sp/>itr++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>callable(*itr);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="220" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclFlow_1a25e8aa7d7efbd05ef11353317174574a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref></type>
        <definition>syclTask tf::syclFlow::for_each_index</definition>
        <argsstring>(I first, I last, I step, C &amp;&amp;callable)</argsstring>
        <name>for_each_index</name>
        <param>
          <type>I</type>
          <declname>first</declname>
        </param>
        <param>
          <type>I</type>
          <declname>last</declname>
        </param>
        <param>
          <type>I</type>
          <declname>step</declname>
        </param>
        <param>
          <type>C &amp;&amp;</type>
          <declname>callable</declname>
        </param>
        <briefdescription>
<para>applies a callable to each index in the range with the step size </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>I</parametername>
</parameternamelist>
<parameterdescription>
<para>index type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>C</parametername>
</parameternamelist>
<parameterdescription>
<para>callable type</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>beginning index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>last index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>step</parametername>
</parameternamelist>
<parameterdescription>
<para>step size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callable</parametername>
</parameternamelist>
<parameterdescription>
<para>the callable to apply to each element in the data array</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1syclTask" kindref="compound">tf::syclTask</ref> handle</para></simplesect>
This method is equivalent to the parallel execution of the following loop on a GPU:</para><para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>step<sp/>is<sp/>positive<sp/>[first,<sp/>last)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i=first;<sp/>i&lt;last;<sp/>i+=step)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>callable(i);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>step<sp/>is<sp/>negative<sp/>[first,<sp/>last)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i=first;<sp/>i&gt;last;<sp/>i+=step)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>callable(i);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="250" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclFlow_1ae278939334a90b6d58d8771e87b2e793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref></type>
        <definition>syclTask tf::syclFlow::transform</definition>
        <argsstring>(I first, I last, C &amp;&amp;callable, S... srcs)</argsstring>
        <name>transform</name>
        <param>
          <type>I</type>
          <declname>first</declname>
        </param>
        <param>
          <type>I</type>
          <declname>last</declname>
        </param>
        <param>
          <type>C &amp;&amp;</type>
          <declname>callable</declname>
        </param>
        <param>
          <type>S...</type>
          <declname>srcs</declname>
        </param>
        <briefdescription>
<para>applies a callable to a source range and stores the result in a target range </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>I</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>C</parametername>
</parameternamelist>
<parameterdescription>
<para>callable type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para>source types</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator to the beginning (inclusive) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator to the end (exclusive) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callable</parametername>
</parameternamelist>
<parameterdescription>
<para>the callable to apply to each element in the range </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcs</parametername>
</parameternamelist>
<parameterdescription>
<para>iterators to the source ranges</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1syclTask" kindref="compound">tf::syclTask</ref> handle</para></simplesect>
This method is equivalent to the parallel execution of the following loop on a SYCL device:</para><para><programlisting filename=".cpp"><codeline><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(first<sp/>!=<sp/>last)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*first++<sp/>=<sp/>callable(*src1++,<sp/>*src2++,<sp/>*src3++,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="276" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclFlow_1acddd05832e53597ae9d30dc913d422ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref></type>
        <definition>syclTask tf::syclFlow::reduce</definition>
        <argsstring>(I first, I last, T *result, C &amp;&amp;op)</argsstring>
        <name>reduce</name>
        <param>
          <type>I</type>
          <declname>first</declname>
        </param>
        <param>
          <type>I</type>
          <declname>last</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>C &amp;&amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
<para>performs parallel reduction over a range of items </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>I</parametername>
</parameternamelist>
<parameterdescription>
<para>input iterator type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>value type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>C</parametername>
</parameternamelist>
<parameterdescription>
<para>callable type</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator to the beginning (inclusive) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator to the end (exclusive) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the result with an initialized value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>binary reduction operator</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1syclTask" kindref="compound">tf::syclTask</ref> handle</para></simplesect>
This method is equivalent to the parallel execution of the following loop on a SYCL device:</para><para><programlisting filename=".cpp"><codeline><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(first<sp/>!=<sp/>last)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*result<sp/>=<sp/>op(*result,<sp/>*first++);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclFlow_1a7a3af92f105114b1095a2cec2ccdffbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref></type>
        <definition>syclTask tf::syclFlow::uninitialized_reduce</definition>
        <argsstring>(I first, I last, T *result, C &amp;&amp;op)</argsstring>
        <name>uninitialized_reduce</name>
        <param>
          <type>I</type>
          <declname>first</declname>
        </param>
        <param>
          <type>I</type>
          <declname>last</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>C &amp;&amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
<para>similar to <ref refid="classtf_1_1syclFlow_1acddd05832e53597ae9d30dc913d422ca" kindref="member">tf::syclFlow::reduce</ref> but does not assume any initial value to reduce </para>        </briefdescription>
        <detaileddescription>
<para>This method is equivalent to the parallel execution of the following loop on a SYCL device:</para><para><programlisting filename=".cpp"><codeline><highlight class="normal">*result<sp/>=<sp/>*first++;<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>initial<sp/>values<sp/>partitipcate<sp/>in<sp/>the<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(first<sp/>!=<sp/>last)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*result<sp/>=<sp/>op(*result,<sp/>*first++);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="319" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclFlow_1a1b033143bcfd857b45a2c2bad213b769" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::syclFlow::offload_until</definition>
        <argsstring>(P &amp;&amp;predicate)</argsstring>
        <name>offload_until</name>
        <param>
          <type>P &amp;&amp;</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
<para>offloads the syclFlow onto a GPU and repeatedly runs it until the predicate becomes true </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>predicate type (a binary callable)</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predicate</parametername>
</parameternamelist>
<parameterdescription>
<para>a binary predicate (returns <computeroutput>true</computeroutput> for stop)</para></parameterdescription>
</parameteritem>
</parameterlist>
Repetitively executes the present syclFlow through the given queue object until the predicate returns <computeroutput>true</computeroutput>.</para><para>By default, if users do not offload the syclFlow, the executor will offload it once. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="340" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="506" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclFlow_1a23fc8f965e05fb8788dcc9fa02473529" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::syclFlow::offload_n</definition>
        <argsstring>(size_t N)</argsstring>
        <name>offload_n</name>
        <param>
          <type>size_t</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>offloads the syclFlow and executes it by the given times </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>number of executions </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="347" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="569" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclFlow_1a2928c2edc466dd625741080c147de4ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::syclFlow::offload</definition>
        <argsstring>()</argsstring>
        <name>offload</name>
        <briefdescription>
<para>offloads the syclFlow and executes it once </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="352" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="574" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclFlow_1a81baff4f1d0408a5b0e45abcc0a64ca0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::syclFlow::memcpy</definition>
        <argsstring>(syclTask task, void *tgt, const void *src, size_t bytes)</argsstring>
        <name>memcpy</name>
        <param>
          <type><ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>tgt</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>rebinds the task to a memcpy task </para>        </briefdescription>
        <detaileddescription>
<para>Similar to <ref refid="classtf_1_1syclFlow_1ac1e1eb858d9271ed61ff4fe00f135e92" kindref="member">tf::syclFlow::memcpy</ref> but operates on an existing task. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="364" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="588" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclFlow_1a8dd81cb78380804fa117797ce412601b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::syclFlow::memset</definition>
        <argsstring>(syclTask task, void *ptr, int value, size_t bytes)</argsstring>
        <name>memset</name>
        <param>
          <type><ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>rebinds the task to a memset task </para>        </briefdescription>
        <detaileddescription>
<para>Similar to <ref refid="classtf_1_1syclFlow_1a54b7497c0f4763bb4f8604f6c5654a5f" kindref="member">tf::syclFlow::memset</ref> but operates on an existing task. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="371" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="595" bodyend="599"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclFlow_1ab44c2d34d333910d4c6d0823346a444d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::syclFlow::fill</definition>
        <argsstring>(syclTask task, void *ptr, const T &amp;pattern, size_t count)</argsstring>
        <name>fill</name>
        <param>
          <type><ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>pattern</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>rebinds the task to a fill task </para>        </briefdescription>
        <detaileddescription>
<para>Similar to <ref refid="classtf_1_1syclFlow_1a628843c986d60bea61eca8c48028159e" kindref="member">tf::syclFlow::fill</ref> but operates on an existing task. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="379" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="603" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclFlow_1a4c4f4ddaac36346e0b9663aea45abe16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_same_v&lt; T, void &gt;, void &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::syclFlow::copy</definition>
        <argsstring>(syclTask task, T *target, const T *source, size_t count)</argsstring>
        <name>copy</name>
        <param>
          <type><ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>rebinds the task to a copy task </para>        </briefdescription>
        <detaileddescription>
<para>Similar to <ref refid="classtf_1_1syclFlow_1ac433456f3960028fb12a53018b263aee" kindref="member">tf::syclFlow::copy</ref> but operates on an existing task. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="389" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="613" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclFlow_1a90c1559f1db6644ce0f06c76659cc735" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>ArgsT</declname>
            <defname>ArgsT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::syclFlow::parallel_for</definition>
        <argsstring>(syclTask task, ArgsT &amp;&amp;... args)</argsstring>
        <name>parallel_for</name>
        <param>
          <type><ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>ArgsT &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>rebinds the task to a parallel-for kernel task </para>        </briefdescription>
        <detaileddescription>
<para>Similar to <ref refid="classtf_1_1syclFlow_1ae42b1da441d5696dc589ee9ee89b9deb" kindref="member">tf::syclFlow::parallel_for</ref> but operates on an existing task. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="397" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="623" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1syclFlow_1ad0d9d75c49a0d0efe4e026d8c874b598" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::syclFlow::single_task</definition>
        <argsstring>(syclTask task, F &amp;&amp;func)</argsstring>
        <name>single_task</name>
        <param>
          <type><ref refid="classtf_1_1syclTask" kindref="compound">syclTask</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>rebinds the task to a single-threaded kernel task </para>        </briefdescription>
        <detaileddescription>
<para>Similar to <ref refid="classtf_1_1syclFlow_1a05ff6f331b6cf48e21ae7f0d6aea9094" kindref="member">tf::syclFlow::single_task</ref> but operates on an existing task. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="405" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="629" bodyend="631"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtf_1_1syclFlow_1a90ff935d7a98daadf3e4f9f4aa663b95" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::syclFlow::syclFlow</definition>
        <argsstring>(Executor &amp;, syclGraph &amp;, sycl::queue &amp;)</argsstring>
        <name>syclFlow</name>
        <param>
          <type><ref refid="classtf_1_1Executor" kindref="compound">Executor</ref> &amp;</type>
          <defname>e</defname>
        </param>
        <param>
          <type>syclGraph &amp;</type>
          <defname>g</defname>
        </param>
        <param>
          <type>sycl::queue &amp;</type>
          <defname>queue</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="409" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="429" bodyend="433"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>class for building a SYCL task dependency graph </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" line="23" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="23" bodyend="419"/>
    <listofallmembers>
      <member refid="classtf_1_1syclFlow_1ab67081d930e69106d1c2b69994a9ebd8" prot="private" virt="non-virtual"><scope>tf::syclFlow</scope><name>_bfs</name></member>
      <member refid="classtf_1_1syclFlow_1ad686b504d6ea0edbef8e2be9d57e63c8" prot="private" virt="non-virtual"><scope>tf::syclFlow</scope><name>_graph</name></member>
      <member refid="classtf_1_1syclFlow_1ae1d0a6dc43a4a28080db9577599fa3fa" prot="private" virt="non-virtual"><scope>tf::syclFlow</scope><name>_handle</name></member>
      <member refid="classtf_1_1syclFlow_1a5728aaf61105ae3ee37eaddb24c1008d" prot="private" virt="non-virtual"><scope>tf::syclFlow</scope><name>_queue</name></member>
      <member refid="classtf_1_1syclFlow_1ab16047aa143c6ed5bbfbff91488251ab" prot="private" virt="non-virtual"><scope>tf::syclFlow</scope><name>_tpg</name></member>
      <member refid="classtf_1_1syclFlow_1a4d07f698f4defa3f8c0600c5c2f64c1c" prot="public" virt="non-virtual"><scope>tf::syclFlow</scope><name>clear</name></member>
      <member refid="classtf_1_1syclFlow_1ac433456f3960028fb12a53018b263aee" prot="public" virt="non-virtual"><scope>tf::syclFlow</scope><name>copy</name></member>
      <member refid="classtf_1_1syclFlow_1a4c4f4ddaac36346e0b9663aea45abe16" prot="public" virt="non-virtual"><scope>tf::syclFlow</scope><name>copy</name></member>
      <member refid="classtf_1_1syclFlow_1a6284f266b5d603fbecd148304c107dc6" prot="public" virt="non-virtual"><scope>tf::syclFlow</scope><name>dump</name></member>
      <member refid="classtf_1_1syclFlow_1a0e33d2d4f26e52a55690d17f77d467b0" prot="public" virt="non-virtual"><scope>tf::syclFlow</scope><name>empty</name></member>
      <member refid="classtf_1_1syclFlow_1a763b2f90bc53f92d680a635fe28e858e" prot="private" virt="non-virtual"><scope>tf::syclFlow</scope><name>Executor</name></member>
      <member refid="classtf_1_1syclFlow_1a628843c986d60bea61eca8c48028159e" prot="public" virt="non-virtual"><scope>tf::syclFlow</scope><name>fill</name></member>
      <member refid="classtf_1_1syclFlow_1ab44c2d34d333910d4c6d0823346a444d" prot="public" virt="non-virtual"><scope>tf::syclFlow</scope><name>fill</name></member>
      <member refid="classtf_1_1syclFlow_1a30c3f7a279d1f88b6052f7ded1ee381a" prot="public" virt="non-virtual"><scope>tf::syclFlow</scope><name>for_each</name></member>
      <member refid="classtf_1_1syclFlow_1a25e8aa7d7efbd05ef11353317174574a" prot="public" virt="non-virtual"><scope>tf::syclFlow</scope><name>for_each_index</name></member>
      <member refid="classtf_1_1syclFlow_1a946b048dd1f13121d8998d8d943e216e" prot="private" virt="non-virtual"><scope>tf::syclFlow</scope><name>handle_t</name></member>
      <member refid="classtf_1_1syclFlow_1ac1e1eb858d9271ed61ff4fe00f135e92" prot="public" virt="non-virtual"><scope>tf::syclFlow</scope><name>memcpy</name></member>
      <member refid="classtf_1_1syclFlow_1a81baff4f1d0408a5b0e45abcc0a64ca0" prot="public" virt="non-virtual"><scope>tf::syclFlow</scope><name>memcpy</name></member>
      <member refid="classtf_1_1syclFlow_1a54b7497c0f4763bb4f8604f6c5654a5f" prot="public" virt="non-virtual"><scope>tf::syclFlow</scope><name>memset</name></member>
      <member refid="classtf_1_1syclFlow_1a8dd81cb78380804fa117797ce412601b" prot="public" virt="non-virtual"><scope>tf::syclFlow</scope><name>memset</name></member>
      <member refid="classtf_1_1syclFlow_1aedcc6b3363f98c68762e7fb32ea45406" prot="public" virt="non-virtual"><scope>tf::syclFlow</scope><name>num_tasks</name></member>
      <member refid="classtf_1_1syclFlow_1a2928c2edc466dd625741080c147de4ef" prot="public" virt="non-virtual"><scope>tf::syclFlow</scope><name>offload</name></member>
      <member refid="classtf_1_1syclFlow_1a23fc8f965e05fb8788dcc9fa02473529" prot="public" virt="non-virtual"><scope>tf::syclFlow</scope><name>offload_n</name></member>
      <member refid="classtf_1_1syclFlow_1a1b033143bcfd857b45a2c2bad213b769" prot="public" virt="non-virtual"><scope>tf::syclFlow</scope><name>offload_until</name></member>
      <member refid="classtf_1_1syclFlow_1a20b79581d27eaed2812ffb14dc821a64" prot="public" virt="non-virtual"><scope>tf::syclFlow</scope><name>on</name></member>
      <member refid="classtf_1_1syclFlow_1a24827902c99771ecff1cfeb88d639af0" prot="public" virt="non-virtual"><scope>tf::syclFlow</scope><name>on</name></member>
      <member refid="classtf_1_1syclFlow_1ae42b1da441d5696dc589ee9ee89b9deb" prot="public" virt="non-virtual"><scope>tf::syclFlow</scope><name>parallel_for</name></member>
      <member refid="classtf_1_1syclFlow_1a90c1559f1db6644ce0f06c76659cc735" prot="public" virt="non-virtual"><scope>tf::syclFlow</scope><name>parallel_for</name></member>
      <member refid="classtf_1_1syclFlow_1acddd05832e53597ae9d30dc913d422ca" prot="public" virt="non-virtual"><scope>tf::syclFlow</scope><name>reduce</name></member>
      <member refid="classtf_1_1syclFlow_1a05ff6f331b6cf48e21ae7f0d6aea9094" prot="public" virt="non-virtual"><scope>tf::syclFlow</scope><name>single_task</name></member>
      <member refid="classtf_1_1syclFlow_1ad0d9d75c49a0d0efe4e026d8c874b598" prot="public" virt="non-virtual"><scope>tf::syclFlow</scope><name>single_task</name></member>
      <member refid="classtf_1_1syclFlow_1aca4297c5bcf7f6e3c59e43415afb0ebd" prot="public" virt="non-virtual"><scope>tf::syclFlow</scope><name>syclFlow</name></member>
      <member refid="classtf_1_1syclFlow_1a90ff935d7a98daadf3e4f9f4aa663b95" prot="private" virt="non-virtual"><scope>tf::syclFlow</scope><name>syclFlow</name></member>
      <member refid="classtf_1_1syclFlow_1ae278939334a90b6d58d8771e87b2e793" prot="public" virt="non-virtual"><scope>tf::syclFlow</scope><name>transform</name></member>
      <member refid="classtf_1_1syclFlow_1a7a3af92f105114b1095a2cec2ccdffbf" prot="public" virt="non-virtual"><scope>tf::syclFlow</scope><name>uninitialized_reduce</name></member>
      <member refid="classtf_1_1syclFlow_1a2dec29bec12f5270893f5d44b2fd79bd" prot="public" virt="non-virtual"><scope>tf::syclFlow</scope><name>~syclFlow</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
