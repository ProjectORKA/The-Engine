<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classtf_1_1cudaSequentialCapturing" kind="class" language="C++" prot="public">
    <compoundname>tf::cudaSequentialCapturing</compoundname>
    <basecompoundref prot="public" virt="non-virtual">tf::cudaCapturingBase</basecompoundref>
    <includes refid="cuda__optimizer_8hpp" local="no">cuda_optimizer.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classtf_1_1cudaSequentialCapturing_1a672b45d300c57d726c203c62f950efbd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class cudaFlowCapturer</definition>
        <argsstring></argsstring>
        <name>cudaFlowCapturer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_optimizer.hpp" line="136" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_optimizer.hpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtf_1_1cudaSequentialCapturing_1ae49388837958fd7698f8f32f31f47de1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tf::cudaSequentialCapturing::cudaSequentialCapturing</definition>
        <argsstring>()=default</argsstring>
        <name>cudaSequentialCapturing</name>
        <briefdescription>
<para>constructs a sequential optimizer </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_optimizer.hpp" line="143" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtf_1_1cudaSequentialCapturing_1a76480f5d2a2366b51a18bc3521e67468" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>cudaGraph_t</type>
        <definition>cudaGraph_t tf::cudaSequentialCapturing::_optimize</definition>
        <argsstring>(cudaGraph &amp;graph)</argsstring>
        <name>_optimize</name>
        <param>
          <type>cudaGraph &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_optimizer.hpp" line="147" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_optimizer.hpp" bodystart="150" bodyend="165"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>class to capture a CUDA graph using a sequential stream </para>    </briefdescription>
    <detaileddescription>
<para>A sequential capturing algorithm finds a topological order of the described graph and captures dependent GPU tasks using a single stream. All GPU tasks run sequentially without breaking inter dependencies. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="67">
        <label>tf::cudaCapturingBase</label>
      </node>
      <node id="66">
        <label>tf::cudaSequentialCapturing</label>
        <link refid="classtf_1_1cudaSequentialCapturing"/>
        <childnode refid="67" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="69">
        <label>tf::cudaCapturingBase</label>
      </node>
      <node id="68">
        <label>tf::cudaSequentialCapturing</label>
        <link refid="classtf_1_1cudaSequentialCapturing"/>
        <childnode refid="69" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_optimizer.hpp" line="134" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_optimizer.hpp" bodystart="134" bodyend="148"/>
    <listofallmembers>
      <member refid="classtf_1_1cudaCapturingBase_1aa33d24eb535b83f0719c3f9770328a37" prot="protected" virt="non-virtual"><scope>tf::cudaSequentialCapturing</scope><name>_levelize</name></member>
      <member refid="classtf_1_1cudaSequentialCapturing_1a76480f5d2a2366b51a18bc3521e67468" prot="private" virt="non-virtual"><scope>tf::cudaSequentialCapturing</scope><name>_optimize</name></member>
      <member refid="classtf_1_1cudaCapturingBase_1ab970a4a344cca5be7e479e09f2599194" prot="protected" virt="non-virtual"><scope>tf::cudaSequentialCapturing</scope><name>_toposort</name></member>
      <member refid="classtf_1_1cudaSequentialCapturing_1a672b45d300c57d726c203c62f950efbd" prot="private" virt="non-virtual"><scope>tf::cudaSequentialCapturing</scope><name>cudaFlowCapturer</name></member>
      <member refid="classtf_1_1cudaSequentialCapturing_1ae49388837958fd7698f8f32f31f47de1" prot="public" virt="non-virtual"><scope>tf::cudaSequentialCapturing</scope><name>cudaSequentialCapturing</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
