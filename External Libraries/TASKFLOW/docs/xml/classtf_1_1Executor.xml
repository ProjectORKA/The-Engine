<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classtf_1_1Executor" kind="class" language="C++" prot="public">
    <compoundname>tf::Executor</compoundname>
    <includes refid="executor_8hpp" local="no">executor.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classtf_1_1Executor_1a61184f9bd9c801d0a5eccecfdbddc641" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class FlowBuilder</definition>
        <argsstring></argsstring>
        <name>FlowBuilder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="52" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classtf_1_1Executor_1aa48945297ede77a161defc88033ce8a6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Subflow</definition>
        <argsstring></argsstring>
        <name>Subflow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="53" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classtf_1_1Executor_1af3d14e26ba8af9e6cc5a32aad8446de7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Runtime</definition>
        <argsstring></argsstring>
        <name>Runtime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="54" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtf_1_1Executor_1ac4a4632561a52d00a02d91296b20cb5a" prot="private" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t tf::Executor::_MAX_STEALS</definition>
        <argsstring></argsstring>
        <name>_MAX_STEALS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="682" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="682" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1a94357ea08db1859178f855b0b926b3de" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/thread/condition_variable" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::condition_variable</ref></type>
        <definition>std::condition_variable tf::Executor::_topology_cv</definition>
        <argsstring></argsstring>
        <name>_topology_cv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="684" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="684" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1a9707dbbe643016ac2e515aada9ebfcf3" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/thread/mutex" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::mutex</ref></type>
        <definition>std::mutex tf::Executor::_taskflow_mutex</definition>
        <argsstring></argsstring>
        <name>_taskflow_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="685" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="685" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1a8be5571fa0df99784aacb26b01d0f4b4" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/thread/mutex" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::mutex</ref></type>
        <definition>std::mutex tf::Executor::_topology_mutex</definition>
        <argsstring></argsstring>
        <name>_topology_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="686" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="686" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1ad031630f03103157f807d85a174d08cb" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/thread/mutex" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::mutex</ref></type>
        <definition>std::mutex tf::Executor::_wsq_mutex</definition>
        <argsstring></argsstring>
        <name>_wsq_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="687" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="687" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1a9e38edfbc967dd3f5ca6f7a115f95ed7" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t tf::Executor::_num_topologies</definition>
        <argsstring></argsstring>
        <name>_num_topologies</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="689" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="689" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1a6704efd89fdcf46bd388b2e83c5def9f" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/container/unordered_map" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::unordered_map</ref>&lt; <ref refid="cpp/thread/thread/id" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::thread::id</ref>, size_t &gt;</type>
        <definition>std::unordered_map&lt;std::thread::id, size_t&gt; tf::Executor::_wids</definition>
        <argsstring></argsstring>
        <name>_wids</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="691" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="691" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1a3b5e7cf6749feded228a46e9fbfdef5f" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/thread/thread" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::thread</ref> &gt;</type>
        <definition>std::vector&lt;std::thread&gt; tf::Executor::_threads</definition>
        <argsstring></argsstring>
        <name>_threads</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="692" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="692" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1ad93162f032d463cc845fbca4fc0d960e" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &gt;</type>
        <definition>std::vector&lt;Worker&gt; tf::Executor::_workers</definition>
        <argsstring></argsstring>
        <name>_workers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="693" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="693" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1a63090414fbad15f5934838d21aa0a28f" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/container/list" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::list</ref>&lt; <ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &gt;</type>
        <definition>std::list&lt;Taskflow&gt; tf::Executor::_taskflows</definition>
        <argsstring></argsstring>
        <name>_taskflows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="694" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="694" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1ab92c39c4b59577cf4163c21ef2edb2f3" prot="private" static="no" mutable="no">
        <type>Notifier</type>
        <definition>Notifier tf::Executor::_notifier</definition>
        <argsstring></argsstring>
        <name>_notifier</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="696" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="696" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1a21685ee0442fbbd635e7134d6a0afe1c" prot="private" static="no" mutable="no">
        <type>TaskQueue&lt; Node * &gt;</type>
        <definition>TaskQueue&lt;Node*&gt; tf::Executor::_wsq</definition>
        <argsstring></argsstring>
        <name>_wsq</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="698" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="698" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1aa987e2bddb791a78ece4e5693f018afb" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/atomic/atomic" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::atomic</ref>&lt; size_t &gt;</type>
        <definition>std::atomic&lt;size_t&gt; tf::Executor::_num_actives</definition>
        <argsstring></argsstring>
        <name>_num_actives</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="700" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="700" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1a904e5d4f22bf5a72bc0af2a4c5f32a3e" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/atomic/atomic" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::atomic</ref>&lt; size_t &gt;</type>
        <definition>std::atomic&lt;size_t&gt; tf::Executor::_num_thieves</definition>
        <argsstring></argsstring>
        <name>_num_thieves</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="701" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="701" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1a500d540a170f1da6e5247168bc6efa87" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/atomic/atomic" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::atomic</ref>&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; tf::Executor::_done</definition>
        <argsstring></argsstring>
        <name>_done</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="702" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="702" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1a9b123d06eb807bf275ba761938624afc" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/memory/shared_ptr" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::shared_ptr</ref>&lt; <ref refid="classtf_1_1WorkerInterface" kindref="compound">WorkerInterface</ref> &gt;</type>
        <definition>std::shared_ptr&lt;WorkerInterface&gt; tf::Executor::_worker_interface</definition>
        <argsstring></argsstring>
        <name>_worker_interface</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="704" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="704" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1ad7f083460df992b1186f83ac99481a57" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/container/unordered_set" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::unordered_set</ref>&lt; <ref refid="cpp/memory/shared_ptr" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::shared_ptr</ref>&lt; <ref refid="classtf_1_1ObserverInterface" kindref="compound">ObserverInterface</ref> &gt; &gt;</type>
        <definition>std::unordered_set&lt;std::shared_ptr&lt;ObserverInterface&gt; &gt; tf::Executor::_observers</definition>
        <argsstring></argsstring>
        <name>_observers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="705" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="705" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtf_1_1Executor_1a23b4c858279616d79612dccd9a715365" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::Executor::Executor</definition>
        <argsstring>(size_t N=std::thread::hardware_concurrency(), std::shared_ptr&lt; WorkerInterface &gt; wix=nullptr)</argsstring>
        <name>Executor</name>
        <param>
          <type>size_t</type>
          <declname>N</declname>
          <defval><ref refid="cpp/thread/thread/hardware_concurrency" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::thread::hardware_concurrency</ref>()</defval>
        </param>
        <param>
          <type><ref refid="cpp/memory/shared_ptr" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::shared_ptr</ref>&lt; <ref refid="classtf_1_1WorkerInterface" kindref="compound">WorkerInterface</ref> &gt;</type>
          <declname>wix</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>constructs the executor with <computeroutput>N</computeroutput> worker threads </para>        </briefdescription>
        <detaileddescription>
<para>The constructor spawns <computeroutput>N</computeroutput> worker threads to run tasks in a work-stealing loop. The number of workers must be greater than zero or an exception will be thrown. By default, the number of worker threads is equal to the maximum hardware concurrency returned by <ref refid="cpp/thread/thread/hardware_concurrency" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::thread::hardware_concurrency</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="67" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="755" bodyend="772"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a5a511b0cc23b264826373d3dabcef670" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::Executor::~Executor</definition>
        <argsstring>()</argsstring>
        <name>~Executor</name>
        <briefdescription>
<para>destructs the executor </para>        </briefdescription>
        <detaileddescription>
<para>The destructor calls <ref refid="classtf_1_1Executor_1ab9aa252f70e9a40020a1e5a89d485b85" kindref="member">Executor::wait_for_all</ref> to wait for all submitted taskflows to complete and then notifies all worker threads to stop and join these threads. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="79" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="775" bodyend="788"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a519777f5783981d534e9e53b99712069" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt; void &gt; tf::Executor::run</definition>
        <argsstring>(Taskflow &amp;taskflow)</argsstring>
        <name>run</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;</type>
          <declname>taskflow</declname>
        </param>
        <briefdescription>
<para>runs a taskflow once </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> object</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that holds the result of the execution</para></simplesect>
This member function executes the given taskflow once and returns a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> object that eventually holds the result of the execution.</para><para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Future" kindref="compound">tf::Future&lt;void&gt;</ref><sp/>future<sp/>=<sp/>executor.<ref refid="classtf_1_1Executor_1a519777f5783981d534e9e53b99712069" kindref="member">run</ref>(taskflow);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">future.wait();</highlight></codeline>
</programlisting></para><para>This member function is thread-safe.</para><para><simplesect kind="attention"><para>The executor does not own the given taskflow. It is your responsibility to ensure the taskflow remains alive during its execution. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="103" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1642" bodyend="1644"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a4bbef53618db1852003a0cd1e1e40c50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt; void &gt; tf::Executor::run</definition>
        <argsstring>(Taskflow &amp;&amp;taskflow)</argsstring>
        <name>run</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;&amp;</type>
          <declname>taskflow</declname>
        </param>
        <briefdescription>
<para>runs a moved taskflow once </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a moved <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> object</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that holds the result of the execution</para></simplesect>
This member function executes a moved taskflow once and returns a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> object that eventually holds the result of the execution. The executor will take care of the lifetime of the moved taskflow.</para><para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Future" kindref="compound">tf::Future&lt;void&gt;</ref><sp/>future<sp/>=<sp/>executor.<ref refid="classtf_1_1Executor_1a519777f5783981d534e9e53b99712069" kindref="member">run</ref>(std::move(taskflow));</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">future.wait();</highlight></codeline>
</programlisting></para><para>This member function is thread-safe. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="124" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1647" bodyend="1649"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ac01c2f31dd3ed3b4dfa1a6c933a58b2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt; void &gt; tf::Executor::run</definition>
        <argsstring>(Taskflow &amp;taskflow, C &amp;&amp;callable)</argsstring>
        <name>run</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;</type>
          <declname>taskflow</declname>
        </param>
        <param>
          <type>C &amp;&amp;</type>
          <declname>callable</declname>
        </param>
        <briefdescription>
<para>runs a taskflow once and invoke a callback upon completion </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callable</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object to be invoked after this run</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that holds the result of the execution</para></simplesect>
This member function executes the given taskflow once and invokes the given callable when the execution completes. This member function returns a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> object that eventually holds the result of the execution.</para><para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Future" kindref="compound">tf::Future&lt;void&gt;</ref><sp/>future<sp/>=<sp/>executor.<ref refid="classtf_1_1Executor_1a519777f5783981d534e9e53b99712069" kindref="member">run</ref>(taskflow,<sp/>[](){<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;done&quot;</highlight><highlight class="normal">;<sp/>});</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">future.wait();</highlight></codeline>
</programlisting></para><para>This member function is thread-safe.</para><para><simplesect kind="attention"><para>The executor does not own the given taskflow. It is your responsibility to ensure the taskflow remains alive during its execution. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="152" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1653" bodyend="1655"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a52c27df2fb7372277f4926f4ab0a0937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt; void &gt; tf::Executor::run</definition>
        <argsstring>(Taskflow &amp;&amp;taskflow, C &amp;&amp;callable)</argsstring>
        <name>run</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;&amp;</type>
          <declname>taskflow</declname>
        </param>
        <param>
          <type>C &amp;&amp;</type>
          <declname>callable</declname>
        </param>
        <briefdescription>
<para>runs a moved taskflow once and invoke a callback upon completion </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a moved <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callable</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object to be invoked after this run</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that holds the result of the execution</para></simplesect>
This member function executes a moved taskflow once and invokes the given callable when the execution completes. This member function returns a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> object that eventually holds the result of the execution. The executor will take care of the lifetime of the moved taskflow.</para><para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Future" kindref="compound">tf::Future&lt;void&gt;</ref><sp/>future<sp/>=<sp/>executor.<ref refid="classtf_1_1Executor_1a519777f5783981d534e9e53b99712069" kindref="member">run</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::move(taskflow),<sp/>[](){<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;done&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">future.wait();</highlight></codeline>
</programlisting></para><para>This member function is thread-safe. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="179" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1659" bodyend="1661"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a6d0617eebc9421f1ba1f82ce6dd02c00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt; void &gt; tf::Executor::run_n</definition>
        <argsstring>(Taskflow &amp;taskflow, size_t N)</argsstring>
        <name>run_n</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;</type>
          <declname>taskflow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>runs a taskflow for <computeroutput>N</computeroutput> times </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>number of runs</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that holds the result of the execution</para></simplesect>
This member function executes the given taskflow <computeroutput>N</computeroutput> times and returns a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> object that eventually holds the result of the execution.</para><para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Future" kindref="compound">tf::Future&lt;void&gt;</ref><sp/>future<sp/>=<sp/>executor.<ref refid="classtf_1_1Executor_1a6d0617eebc9421f1ba1f82ce6dd02c00" kindref="member">run_n</ref>(taskflow,<sp/>2);<sp/><sp/></highlight><highlight class="comment">//<sp/>run<sp/>taskflow<sp/>2<sp/>times</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">future.wait();</highlight></codeline>
</programlisting></para><para>This member function is thread-safe.</para><para><simplesect kind="attention"><para>The executor does not own the given taskflow. It is your responsibility to ensure the taskflow remains alive during its execution. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="204" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1664" bodyend="1666"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ad10a12c9e14c8132e414c9a48443d938" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt; void &gt; tf::Executor::run_n</definition>
        <argsstring>(Taskflow &amp;&amp;taskflow, size_t N)</argsstring>
        <name>run_n</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;&amp;</type>
          <declname>taskflow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>runs a moved taskflow for <computeroutput>N</computeroutput> times </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a moved <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>number of runs</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that holds the result of the execution</para></simplesect>
This member function executes a moved taskflow <computeroutput>N</computeroutput> times and returns a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> object that eventually holds the result of the execution. The executor will take care of the lifetime of the moved taskflow.</para><para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Future" kindref="compound">tf::Future&lt;void&gt;</ref><sp/>future<sp/>=<sp/>executor.<ref refid="classtf_1_1Executor_1a6d0617eebc9421f1ba1f82ce6dd02c00" kindref="member">run_n</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::move(taskflow),<sp/>2<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>run<sp/>the<sp/>moved<sp/>taskflow<sp/>2<sp/>times</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">future.wait();</highlight></codeline>
</programlisting></para><para>This member function is thread-safe. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="228" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1669" bodyend="1671"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1abd99b189457d1a00a33cd22339694fcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt; void &gt; tf::Executor::run_n</definition>
        <argsstring>(Taskflow &amp;taskflow, size_t N, C &amp;&amp;callable)</argsstring>
        <name>run_n</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;</type>
          <declname>taskflow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>N</declname>
        </param>
        <param>
          <type>C &amp;&amp;</type>
          <declname>callable</declname>
        </param>
        <briefdescription>
<para>runs a taskflow for <computeroutput>N</computeroutput> times and then invokes a callback </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>number of runs </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callable</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object to be invoked after this run</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that holds the result of the execution</para></simplesect>
This member function executes the given taskflow <computeroutput>N</computeroutput> times and invokes the given callable when the execution completes. This member function returns a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> object that eventually holds the result of the execution.</para><para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Future" kindref="compound">tf::Future&lt;void&gt;</ref><sp/>future<sp/>=<sp/>executor.<ref refid="classtf_1_1Executor_1a519777f5783981d534e9e53b99712069" kindref="member">run</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>taskflow,<sp/>2,<sp/>[](){<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;done&quot;</highlight><highlight class="normal">;<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>runs<sp/>taskflow<sp/>2<sp/>times<sp/>and<sp/>invoke</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>lambda<sp/>to<sp/>print<sp/>&quot;done&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">future.wait();</highlight></codeline>
</programlisting></para><para>This member function is thread-safe.</para><para><simplesect kind="attention"><para>The executor does not own the given taskflow. It is your responsibility to ensure the taskflow remains alive during its execution. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="260" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1675" bodyend="1679"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ad14430ac62f0e64e9e21712ba35c22ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt; void &gt; tf::Executor::run_n</definition>
        <argsstring>(Taskflow &amp;&amp;taskflow, size_t N, C &amp;&amp;callable)</argsstring>
        <name>run_n</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;&amp;</type>
          <declname>taskflow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>N</declname>
        </param>
        <param>
          <type>C &amp;&amp;</type>
          <declname>callable</declname>
        </param>
        <briefdescription>
<para>runs a moved taskflow for <computeroutput>N</computeroutput> times and then invokes a callback </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a moved <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>number of runs </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callable</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object to be invoked after this run</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that holds the result of the execution</para></simplesect>
This member function executes a moved taskflow <computeroutput>N</computeroutput> times and invokes the given callable when the execution completes. This member function returns a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> object that eventually holds the result of the execution.</para><para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Future" kindref="compound">tf::Future&lt;void&gt;</ref><sp/>future<sp/>=<sp/>executor.<ref refid="classtf_1_1Executor_1a6d0617eebc9421f1ba1f82ce6dd02c00" kindref="member">run_n</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>run<sp/>the<sp/>moved<sp/>taskflow<sp/>2<sp/>times<sp/>and<sp/>invoke<sp/>the<sp/>lambda<sp/>to<sp/>print<sp/>&quot;done&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::move(taskflow),<sp/>2,<sp/>[](){<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;done&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">future.wait();</highlight></codeline>
</programlisting></para><para>This member function is thread-safe. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="288" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1683" bodyend="1687"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a0f52e9dd64b65aba32ca0e13c1ed300a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt; void &gt; tf::Executor::run_until</definition>
        <argsstring>(Taskflow &amp;taskflow, P &amp;&amp;pred)</argsstring>
        <name>run_until</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;</type>
          <declname>taskflow</declname>
        </param>
        <param>
          <type>P &amp;&amp;</type>
          <declname>pred</declname>
        </param>
        <briefdescription>
<para>runs a taskflow multiple times until the predicate becomes true </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pred</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean predicate to return <computeroutput>true</computeroutput> for stop</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that holds the result of the execution</para></simplesect>
This member function executes the given taskflow multiple times until the predicate returns <computeroutput>true</computeroutput>. This member function returns a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> object that eventually holds the result of the execution.</para><para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Future" kindref="compound">tf::Future&lt;void&gt;</ref><sp/>future<sp/>=<sp/>executor.<ref refid="classtf_1_1Executor_1a0f52e9dd64b65aba32ca0e13c1ed300a" kindref="member">run_until</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>taskflow,<sp/>[](){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="cpp/numeric/random/rand" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">rand</ref>()%10<sp/>==<sp/>0<sp/>}</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">future.wait();</highlight></codeline>
</programlisting></para><para>This member function is thread-safe.</para><para><simplesect kind="attention"><para>The executor does not own the given taskflow. It is your responsibility to ensure the taskflow remains alive during its execution. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="318" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1691" bodyend="1693"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ab10fac2869d80049e5a75d2084a78eda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt; void &gt; tf::Executor::run_until</definition>
        <argsstring>(Taskflow &amp;&amp;taskflow, P &amp;&amp;pred)</argsstring>
        <name>run_until</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;&amp;</type>
          <declname>taskflow</declname>
        </param>
        <param>
          <type>P &amp;&amp;</type>
          <declname>pred</declname>
        </param>
        <briefdescription>
<para>runs a moved taskflow and keeps running it until the predicate becomes true </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a moved <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pred</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean predicate to return <computeroutput>true</computeroutput> for stop</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that holds the result of the execution</para></simplesect>
This member function executes a moved taskflow multiple times until the predicate returns <computeroutput>true</computeroutput>. This member function returns a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> object that eventually holds the result of the execution. The executor will take care of the lifetime of the moved taskflow.</para><para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Future" kindref="compound">tf::Future&lt;void&gt;</ref><sp/>future<sp/>=<sp/>executor.<ref refid="classtf_1_1Executor_1a0f52e9dd64b65aba32ca0e13c1ed300a" kindref="member">run_until</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::move(taskflow),<sp/>[](){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="cpp/numeric/random/rand" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">rand</ref>()%10<sp/>==<sp/>0<sp/>}</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">future.wait();</highlight></codeline>
</programlisting></para><para>This member function is thread-safe. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="346" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1697" bodyend="1699"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1af84856e5c4c605fcb3cbfbcad069a6a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt; void &gt; tf::Executor::run_until</definition>
        <argsstring>(Taskflow &amp;taskflow, P &amp;&amp;pred, C &amp;&amp;callable)</argsstring>
        <name>run_until</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;</type>
          <declname>taskflow</declname>
        </param>
        <param>
          <type>P &amp;&amp;</type>
          <declname>pred</declname>
        </param>
        <param>
          <type>C &amp;&amp;</type>
          <declname>callable</declname>
        </param>
        <briefdescription>
<para>runs a taskflow multiple times until the predicate becomes true and then invokes the callback </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pred</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean predicate to return <computeroutput>true</computeroutput> for stop </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callable</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object to be invoked after this run completes</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that holds the result of the execution</para></simplesect>
This member function executes the given taskflow multiple times until the predicate returns <computeroutput>true</computeroutput> and then invokes the given callable when the execution completes. This member function returns a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> object that eventually holds the result of the execution.</para><para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Future" kindref="compound">tf::Future&lt;void&gt;</ref><sp/>future<sp/>=<sp/>executor.<ref refid="classtf_1_1Executor_1a0f52e9dd64b65aba32ca0e13c1ed300a" kindref="member">run_until</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>taskflow,<sp/>[](){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="cpp/numeric/random/rand" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">rand</ref>()%10<sp/>==<sp/>0<sp/>},<sp/>[](){<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;done&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">future.wait();</highlight></codeline>
</programlisting></para><para>This member function is thread-safe.</para><para><simplesect kind="attention"><para>The executor does not own the given taskflow. It is your responsibility to ensure the taskflow remains alive during its execution. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="379" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1703" bodyend="1740"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1af30c6947f060e4bdf344e90b6b44fc70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt; void &gt; tf::Executor::run_until</definition>
        <argsstring>(Taskflow &amp;&amp;taskflow, P &amp;&amp;pred, C &amp;&amp;callable)</argsstring>
        <name>run_until</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;&amp;</type>
          <declname>taskflow</declname>
        </param>
        <param>
          <type>P &amp;&amp;</type>
          <declname>pred</declname>
        </param>
        <param>
          <type>C &amp;&amp;</type>
          <declname>callable</declname>
        </param>
        <briefdescription>
<para>runs a moved taskflow and keeps running it until the predicate becomes true and then invokes the callback </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a moved <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pred</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean predicate to return <computeroutput>true</computeroutput> for stop </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callable</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object to be invoked after this run completes</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that holds the result of the execution</para></simplesect>
This member function executes a moved taskflow multiple times until the predicate returns <computeroutput>true</computeroutput> and then invokes the given callable when the execution completes. This member function returns a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> object that eventually holds the result of the execution. The executor will take care of the lifetime of the moved taskflow.</para><para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Future" kindref="compound">tf::Future&lt;void&gt;</ref><sp/>future<sp/>=<sp/>executor.<ref refid="classtf_1_1Executor_1a0f52e9dd64b65aba32ca0e13c1ed300a" kindref="member">run_until</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::move(taskflow),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[](){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="cpp/numeric/random/rand" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">rand</ref>()%10<sp/>==<sp/>0<sp/>},<sp/>[](){<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;done&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">future.wait();</highlight></codeline>
</programlisting></para><para>This member function is thread-safe. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="410" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1744" bodyend="1755"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ab05ad34c59cf11a7c4de82cf58bba91e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::Executor::run_and_wait</definition>
        <argsstring>(T &amp;target)</argsstring>
        <name>run_and_wait</name>
        <param>
          <type>T &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>runs a target graph and waits until it completes using an internal worker of this executor </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>target type which has <computeroutput><ref refid="classtf_1_1Graph" kindref="compound">tf::Graph</ref>&amp; T::graph()</computeroutput> defined </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>the target task graph object</para></parameterdescription>
</parameteritem>
</parameterlist>
The method runs a target graph which has <computeroutput><ref refid="classtf_1_1Graph" kindref="compound">tf::Graph</ref>&amp; T::graph()</computeroutput> defined and waits until the execution completes. Unlike the typical flow of calling <computeroutput><ref refid="classtf_1_1Executor_1a519777f5783981d534e9e53b99712069" kindref="member">tf::Executor::run</ref></computeroutput> series plus waiting on the result, this method must be called by an internal worker of this executor. The caller worker will participate in the work-stealing loop of the scheduler, therby avoiding potential deadlock caused by blocked waiting.</para><para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Executor" kindref="compound">tf::Executor</ref><sp/>executor(2);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref><sp/>taskflow;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="cpp/container/array" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::array&lt;tf::Taskflow, 1000&gt;</ref><sp/>others;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="cpp/atomic/atomic" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::atomic&lt;size_t&gt;</ref><sp/>counter{0};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n=0;<sp/>n&lt;1000;<sp/>n++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;1000;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>others[n].emplace([&amp;](){<sp/>counter++;<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>taskflow.<ref refid="classtf_1_1FlowBuilder_1a60d7a666cab71ecfa3010b2efb0d6b57" kindref="member">emplace</ref>([&amp;executor,<sp/>&amp;<ref refid="namespacetf" kindref="compound">tf</ref>=others[n]](){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>executor.<ref refid="classtf_1_1Executor_1ab05ad34c59cf11a7c4de82cf58bba91e" kindref="member">run_and_wait</ref>(<ref refid="namespacetf" kindref="compound">tf</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//executor.run(tf).wait();<sp/><sp/>&lt;-<sp/>blocking<sp/>the<sp/>worker<sp/>without<sp/>doing<sp/>anything</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>will<sp/>introduce<sp/>deadlock</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">executor.<ref refid="classtf_1_1Executor_1a519777f5783981d534e9e53b99712069" kindref="member">run</ref>(taskflow).wait();</highlight></codeline>
</programlisting></para><para>The method is thread-safe as long as the target is not concurrently ran by two or more threads.</para><para><simplesect kind="attention"><para>You must call <ref refid="classtf_1_1Executor_1ab05ad34c59cf11a7c4de82cf58bba91e" kindref="member">tf::Executor::run_and_wait</ref> from a worker of the calling executor or an exception will be thrown. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="455" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1759" bodyend="1769"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1afbff30c324c5887aace09e7fe9a0d607" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::Executor::loop_until</definition>
        <argsstring>(P &amp;&amp;predicate)</argsstring>
        <name>loop_until</name>
        <param>
          <type>P &amp;&amp;</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
<para>keeps running the work-stealing loop until the predicate becomes true </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>predicate type </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predicate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean predicate to indicate when to stop the loop</para></parameterdescription>
</parameteritem>
</parameterlist>
The method keeps running the caller worker in the work-stealing loop until the stop predicate becomes true.</para><para><simplesect kind="attention"><para>You must call <ref refid="classtf_1_1Executor_1ab05ad34c59cf11a7c4de82cf58bba91e" kindref="member">tf::Executor::run_and_wait</ref> from a worker of the calling executor or an exception will be thrown. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="471" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1773" bodyend="1782"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ab9aa252f70e9a40020a1e5a89d485b85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::wait_for_all</definition>
        <argsstring>()</argsstring>
        <name>wait_for_all</name>
        <briefdescription>
<para>waits for all tasks to complete </para>        </briefdescription>
        <detaileddescription>
<para>This member function waits until all submitted tasks (e.g., taskflows, asynchronous tasks) to finish.</para><para><programlisting filename=".cpp"><codeline><highlight class="normal">executor.<ref refid="classtf_1_1Executor_1a519777f5783981d534e9e53b99712069" kindref="member">run</ref>(taskflow1);</highlight></codeline>
<codeline><highlight class="normal">executor.<ref refid="classtf_1_1Executor_1a6d0617eebc9421f1ba1f82ce6dd02c00" kindref="member">run_n</ref>(taskflow2,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">executor.<ref refid="classtf_1_1Executor_1a6d0617eebc9421f1ba1f82ce6dd02c00" kindref="member">run_n</ref>(taskflow3,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal">executor.<ref refid="classtf_1_1Executor_1ab9aa252f70e9a40020a1e5a89d485b85" kindref="member">wait_for_all</ref>();<sp/><sp/></highlight><highlight class="comment">//<sp/>wait<sp/>until<sp/>the<sp/>above<sp/>submitted<sp/>taskflows<sp/>finish</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="486" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1805" bodyend="1808"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a9d2d464ab2a84ecb3b3ea7747e8e276b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::Executor::num_workers</definition>
        <argsstring>() const noexcept</argsstring>
        <name>num_workers</name>
        <briefdescription>
<para>queries the number of worker threads </para>        </briefdescription>
        <detaileddescription>
<para>Each worker represents one unique thread spawned by an executor upon its construction time.</para><para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Executor" kindref="compound">tf::Executor</ref><sp/>executor(4);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/>executor.<ref refid="classtf_1_1Executor_1a9d2d464ab2a84ecb3b3ea7747e8e276b" kindref="member">num_workers</ref>();<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="499" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="791" bodyend="793"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a6d6c28ed58211e4c27a99571e5bf0b6c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::Executor::num_topologies</definition>
        <argsstring>() const</argsstring>
        <name>num_topologies</name>
        <briefdescription>
<para>queries the number of running topologies at the time of this call </para>        </briefdescription>
        <detaileddescription>
<para>When a taskflow is submitted to an executor, a topology is created to store runtime metadata of the running taskflow. When the execution of the submitted taskflow finishes, its corresponding topology will be removed from the executor.</para><para><programlisting filename=".cpp"><codeline><highlight class="normal">executor.<ref refid="classtf_1_1Executor_1a519777f5783981d534e9e53b99712069" kindref="member">run</ref>(taskflow);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/>executor.<ref refid="classtf_1_1Executor_1a6d6c28ed58211e4c27a99571e5bf0b6c" kindref="member">num_topologies</ref>();<sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>or<sp/>1<sp/>(taskflow<sp/>still<sp/>running)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="514" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="801" bodyend="803"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a5fb438dc0f7b9e1ae2fe3f240c82f174" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::Executor::num_taskflows</definition>
        <argsstring>() const</argsstring>
        <name>num_taskflows</name>
        <briefdescription>
<para>queries the number of running taskflows with moved ownership </para>        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">executor.<ref refid="classtf_1_1Executor_1a519777f5783981d534e9e53b99712069" kindref="member">run</ref>(std::move(taskflow));</highlight></codeline>
<codeline><highlight class="normal"><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/>executor.<ref refid="classtf_1_1Executor_1a5fb438dc0f7b9e1ae2fe3f240c82f174" kindref="member">num_taskflows</ref>();<sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>or<sp/>1<sp/>(taskflow<sp/>still<sp/>running)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="524" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="806" bodyend="808"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a6487d589cb1f6b078b69fd3bb1082345" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int tf::Executor::this_worker_id</definition>
        <argsstring>() const</argsstring>
        <name>this_worker_id</name>
        <briefdescription>
<para>queries the id of the caller thread in this executor </para>        </briefdescription>
        <detaileddescription>
<para>Each worker has an unique id in the range of <computeroutput>0</computeroutput> to <computeroutput>N-1</computeroutput> associated with its parent executor. If the caller thread does not belong to the executor, <computeroutput>-1</computeroutput> is returned.</para><para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Executor" kindref="compound">tf::Executor</ref><sp/>executor(4);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4<sp/>workers<sp/>in<sp/>the<sp/>executor</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">executor.<ref refid="classtf_1_1Executor_1a6487d589cb1f6b078b69fd3bb1082345" kindref="member">this_worker_id</ref>();<sp/><sp/></highlight><highlight class="comment">//<sp/>-1<sp/>(main<sp/>thread<sp/>is<sp/>not<sp/>a<sp/>worker)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">taskflow.<ref refid="classtf_1_1FlowBuilder_1a60d7a666cab71ecfa3010b2efb0d6b57" kindref="member">emplace</ref>([&amp;](){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/>executor.<ref refid="classtf_1_1Executor_1a6487d589cb1f6b078b69fd3bb1082345" kindref="member">this_worker_id</ref>();<sp/><sp/></highlight><highlight class="comment">//<sp/>0,<sp/>1,<sp/>2,<sp/>or<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline><highlight class="normal">executor.<ref refid="classtf_1_1Executor_1a519777f5783981d534e9e53b99712069" kindref="member">run</ref>(taskflow);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="543" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="898" bodyend="901"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a1e6866c8f1b6a2e932f06d0b4eb032c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>ArgsT</declname>
            <defname>ArgsT</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto tf::Executor::async</definition>
        <argsstring>(F &amp;&amp;f, ArgsT &amp;&amp;... args)</argsstring>
        <name>async</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>ArgsT &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>runs a given function asynchronously </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>callable type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ArgsT</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter types</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>callable object to call </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>parameters to pass to the callable</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that will holds the result of the execution</para></simplesect>
The method creates an asynchronous task to launch the given function on the given arguments. Unlike std::async, the return here is a <emphasis><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref></emphasis> that holds an optional object to the result. If the asynchronous task is cancelled before it runs, the return is a <computeroutput>std::nullopt</computeroutput>, or the value returned by the callable.</para><para><programlisting filename=".cpp"><codeline><highlight class="normal">tf::Fugure&lt;std::optional&lt;int&gt;&gt;<sp/>future<sp/>=<sp/>executor.<ref refid="classtf_1_1Executor_1a1e6866c8f1b6a2e932f06d0b4eb032c0" kindref="member">async</ref>([](){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;create<sp/>an<sp/>asynchronous<sp/>task<sp/>and<sp/>returns<sp/>1\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
</programlisting></para><para>This member function is thread-safe. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="573" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="862" bodyend="864"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a51acee1670e9f246c7ccd7f6a63f1524" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>ArgsT</declname>
            <defname>ArgsT</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto tf::Executor::named_async</definition>
        <argsstring>(const std::string &amp;name, F &amp;&amp;f, ArgsT &amp;&amp;... args)</argsstring>
        <name>named_async</name>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>ArgsT &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>runs a given function asynchronously and gives a name to this task </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>callable type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ArgsT</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter types</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the asynchronous task </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>callable object to call </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>parameters to pass to the callable</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that will holds the result of the execution</para></simplesect>
The method creates a named asynchronous task to launch the given function on the given arguments. Naming an asynchronous task is primarily used for profiling and visualizing the task execution timeline. Unlike std::async, the return here is a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that holds an optional object to the result. If the asynchronous task is cancelled before it runs, the return is a <computeroutput>std::nullopt</computeroutput>, or the value returned by the callable.</para><para><programlisting filename=".cpp"><codeline><highlight class="normal">tf::Fugure&lt;std::optional&lt;int&gt;&gt;<sp/>future<sp/>=<sp/>executor.<ref refid="classtf_1_1Executor_1a51acee1670e9f246c7ccd7f6a63f1524" kindref="member">named_async</ref>(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>[](){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;create<sp/>an<sp/>asynchronous<sp/>task<sp/>with<sp/>a<sp/>name<sp/>and<sp/>returns<sp/>1\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
</programlisting></para><para>This member function is thread-safe. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="606" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="818" bodyend="858"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1abf71e7ec0026ddfce79c912264369bc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>ArgsT</declname>
            <defname>ArgsT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::Executor::silent_async</definition>
        <argsstring>(F &amp;&amp;f, ArgsT &amp;&amp;... args)</argsstring>
        <name>silent_async</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>ArgsT &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>similar to <ref refid="classtf_1_1Executor_1a1e6866c8f1b6a2e932f06d0b4eb032c0" kindref="member">tf::Executor::async</ref> but does not return a future object </para>        </briefdescription>
        <detaileddescription>
<para>This member function is more efficient than <ref refid="classtf_1_1Executor_1a1e6866c8f1b6a2e932f06d0b4eb032c0" kindref="member">tf::Executor::async</ref> and is encouraged to use when there is no data returned.</para><para><programlisting filename=".cpp"><codeline><highlight class="normal">executor.<ref refid="classtf_1_1Executor_1abf71e7ec0026ddfce79c912264369bc9" kindref="member">silent_async</ref>([](){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;create<sp/>an<sp/>asynchronous<sp/>task<sp/>with<sp/>no<sp/>return\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
</programlisting></para><para>This member function is thread-safe. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="623" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="893" bodyend="895"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a1febfaa7a99cac8466263c58fd2a7c06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>ArgsT</declname>
            <defname>ArgsT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::Executor::named_silent_async</definition>
        <argsstring>(const std::string &amp;name, F &amp;&amp;f, ArgsT &amp;&amp;... args)</argsstring>
        <name>named_silent_async</name>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>ArgsT &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>similar to <ref refid="classtf_1_1Executor_1a51acee1670e9f246c7ccd7f6a63f1524" kindref="member">tf::Executor::named_async</ref> but does not return a future object </para>        </briefdescription>
        <detaileddescription>
<para>This member function is more efficient than <ref refid="classtf_1_1Executor_1a51acee1670e9f246c7ccd7f6a63f1524" kindref="member">tf::Executor::named_async</ref> and is encouraged to use when there is no data returned.</para><para><programlisting filename=".cpp"><codeline><highlight class="normal">executor.<ref refid="classtf_1_1Executor_1a1febfaa7a99cac8466263c58fd2a7c06" kindref="member">named_silent_async</ref>(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>[](){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;create<sp/>an<sp/>asynchronous<sp/>task<sp/>with<sp/>a<sp/>name<sp/>and<sp/>no<sp/>return\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
</programlisting></para><para>This member function is thread-safe. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="640" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="868" bodyend="889"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1aff77def96ae740d648dd84e571237c83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Observer</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>ArgsT</declname>
            <defname>ArgsT</defname>
          </param>
        </templateparamlist>
        <type><ref refid="cpp/memory/shared_ptr" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::shared_ptr</ref>&lt; Observer &gt;</type>
        <definition>std::shared_ptr&lt; Observer &gt; tf::Executor::make_observer</definition>
        <argsstring>(ArgsT &amp;&amp;... args)</argsstring>
        <name>make_observer</name>
        <param>
          <type>ArgsT &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>constructs an observer to inspect the activities of worker threads </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Observer</parametername>
</parameternamelist>
<parameterdescription>
<para>observer type derived from <ref refid="classtf_1_1ObserverInterface" kindref="compound">tf::ObserverInterface</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ArgsT</parametername>
</parameternamelist>
<parameterdescription>
<para>argument parameter pack</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments to forward to the constructor of the observer</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a shared pointer to the created observer</para></simplesect>
Each executor manages a list of observers with shared ownership with callers. For each of these observers, the two member functions, <ref refid="classtf_1_1ObserverInterface_1a8225fcacb03089677a1efc4b16b734cc" kindref="member">tf::ObserverInterface::on_entry</ref> and <ref refid="classtf_1_1ObserverInterface_1aa22f5378154653f08d9a58326bda4754" kindref="member">tf::ObserverInterface::on_exit</ref> will be called before and after the execution of a task.</para><para>This member function is not thread-safe. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="660" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1134" bodyend="1149"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a31081f492c376f7b798de0e430534531" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Observer</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::Executor::remove_observer</definition>
        <argsstring>(std::shared_ptr&lt; Observer &gt; observer)</argsstring>
        <name>remove_observer</name>
        <param>
          <type><ref refid="cpp/memory/shared_ptr" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::shared_ptr</ref>&lt; Observer &gt;</type>
          <declname>observer</declname>
        </param>
        <briefdescription>
<para>removes an observer from the executor </para>        </briefdescription>
        <detaileddescription>
<para>This member function is not thread-safe. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="668" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1153" bodyend="1161"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1affec621aae59d73fc188ef454008fda2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::Executor::num_observers</definition>
        <argsstring>() const noexcept</argsstring>
        <name>num_observers</name>
        <briefdescription>
<para>queries the number of observers </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="673" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1164" bodyend="1166"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ad83b1bbb987709e797ba3f627493c37c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::Executor::max_steals</definition>
        <argsstring>() const noexcept</argsstring>
        <name>max_steals</name>
        <briefdescription>
<para>queries the maximum number of steals before yielding </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="678" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="796" bodyend="798"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtf_1_1Executor_1a941f6e5e9e6141a81c750648c4802b63" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> *</type>
        <definition>Worker * tf::Executor::_this_worker</definition>
        <argsstring>()</argsstring>
        <name>_this_worker</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="707" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="811" bodyend="814"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a57f5105dc812d83f259ec8cab7c96228" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tf::Executor::_wait_for_task</definition>
        <argsstring>(Worker &amp;, Node *&amp;)</argsstring>
        <name>_wait_for_task</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
          <defname>worker</defname>
        </param>
        <param>
          <type>Node *&amp;</type>
          <defname>t</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="709" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1064" bodyend="1130"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ae023614977a19def9e04cf7212eab65b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_observer_prologue</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_observer_prologue</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
          <defname>worker</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="711" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1481" bodyend="1485"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a9cd8c1a72af4477bc0f9575b68ffb16a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_observer_epilogue</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_observer_epilogue</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
          <defname>worker</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="712" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1488" bodyend="1492"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a8aee6c0ec55b4bfb3909601203e98514" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_spawn</definition>
        <argsstring>(size_t)</argsstring>
        <name>_spawn</name>
        <param>
          <type>size_t</type>
          <defname>N</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="713" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="904" bodyend="971"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a0b4f231e11016194980b14e76262c8a7" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_exploit_task</definition>
        <argsstring>(Worker &amp;, Node *&amp;)</argsstring>
        <name>_exploit_task</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
          <defname>w</defname>
        </param>
        <param>
          <type>Node *&amp;</type>
          <defname>t</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="714" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1046" bodyend="1061"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1aab7cc2e53d75fcc87fcc919f29bf9ca9" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_explore_task</definition>
        <argsstring>(Worker &amp;, Node *&amp;)</argsstring>
        <name>_explore_task</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
          <defname>w</defname>
        </param>
        <param>
          <type>Node *&amp;</type>
          <defname>t</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="715" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1016" bodyend="1043"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ab8d98f12a62d10ad6cf1a4011a4d0034" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_schedule</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_schedule</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
          <defname>worker</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="716" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1169" bodyend="1185"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a685c08b62a494359e34c6de2a700fdab" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_schedule</definition>
        <argsstring>(Node *)</argsstring>
        <name>_schedule</name>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="717" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1188" bodyend="1198"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a9cf973d7c5310d058fee003fda9098c4" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_schedule</definition>
        <argsstring>(Worker &amp;, const SmallVector&lt; Node *&gt; &amp;)</argsstring>
        <name>_schedule</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
          <defname>worker</defname>
        </param>
        <param>
          <type>const <ref refid="classtf_1_1SmallVector" kindref="compound">SmallVector</ref>&lt; Node *&gt; &amp;</type>
          <defname>nodes</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="718" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1201" bodyend="1233"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a8f8202cfea57480f304d1652358386d3" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_schedule</definition>
        <argsstring>(const SmallVector&lt; Node *&gt; &amp;)</argsstring>
        <name>_schedule</name>
        <param>
          <type>const <ref refid="classtf_1_1SmallVector" kindref="compound">SmallVector</ref>&lt; Node *&gt; &amp;</type>
          <defname>nodes</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="719" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1236" bodyend="1258"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a723daf897c5d3d3517583cb4c62654ee" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_set_up_topology</definition>
        <argsstring>(Worker *, Topology *)</argsstring>
        <name>_set_up_topology</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> *</type>
          <defname>worker</defname>
        </param>
        <param>
          <type>Topology *</type>
          <defname>tpg</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="720" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1811" bodyend="1840"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a76be884d38d1bb8f9b8bba488c901b4b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_tear_down_topology</definition>
        <argsstring>(Worker &amp;, Topology *)</argsstring>
        <name>_tear_down_topology</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
          <defname>worker</defname>
        </param>
        <param>
          <type>Topology *</type>
          <defname>tpg</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="721" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1843" bodyend="1917"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a42e7db3fc43e1c5479e30e8d83da9e74" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_tear_down_async</definition>
        <argsstring>(Node *)</argsstring>
        <name>_tear_down_async</name>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="722" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1433" bodyend="1441"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a17fe8e0f32892cf2848611bca7566378" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_tear_down_invoke</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_tear_down_invoke</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
          <defname>worker</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="723" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1444" bodyend="1455"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a3a7524f412f7c7c328774135077f0498" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_cancel_invoke</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_cancel_invoke</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
          <defname>worker</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="724" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1458" bodyend="1478"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ab85dc42b3e9b18e4b975bd5e9a8c5e72" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_increment_topology</definition>
        <argsstring>()</argsstring>
        <name>_increment_topology</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="725" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1785" bodyend="1788"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a8728f22f6d177fad84ce667e02a7a3b9" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_decrement_topology</definition>
        <argsstring>()</argsstring>
        <name>_decrement_topology</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="726" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1799" bodyend="1802"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a08945917285cd57d33efc99530fbd384" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_decrement_topology_and_notify</definition>
        <argsstring>()</argsstring>
        <name>_decrement_topology_and_notify</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="727" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1791" bodyend="1796"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ad16165142908aca9444ea88e65040219" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_invoke</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_invoke</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
          <defname>worker</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="728" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1261" bodyend="1430"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ac243d2a08b5a4a75dd440dc063b886ce" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_invoke_static_task</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_invoke_static_task</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
          <defname>worker</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="729" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1495" bodyend="1499"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a4a000baf70b108201e3787787309c272" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_invoke_dynamic_task</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_invoke_dynamic_task</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
          <defname>w</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="730" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1502" bodyend="1519"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a417896b64fa0cdec764623d337b5f455" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_consume_graph</definition>
        <argsstring>(Worker &amp;, Node *, Graph &amp;)</argsstring>
        <name>_consume_graph</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
          <defname>w</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>p</defname>
        </param>
        <param>
          <type><ref refid="classtf_1_1Graph" kindref="compound">Graph</ref> &amp;</type>
          <defname>g</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="731" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1555" bodyend="1576"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a4b36b0a386f0eb5ba9cd3984c589a5c1" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_detach_dynamic_task</definition>
        <argsstring>(Worker &amp;, Node *, Graph &amp;)</argsstring>
        <name>_detach_dynamic_task</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
          <defname>w</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>p</defname>
        </param>
        <param>
          <type><ref refid="classtf_1_1Graph" kindref="compound">Graph</ref> &amp;</type>
          <defname>g</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="732" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1522" bodyend="1552"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1afa6be6aab23ff4b2a293a2245818916d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_invoke_condition_task</definition>
        <argsstring>(Worker &amp;, Node *, SmallVector&lt; int &gt; &amp;)</argsstring>
        <name>_invoke_condition_task</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
          <defname>worker</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <param>
          <type><ref refid="classtf_1_1SmallVector" kindref="compound">SmallVector</ref>&lt; int &gt; &amp;</type>
          <defname>conds</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="733" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1579" bodyend="1585"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a19b3f10d4eab40143d3f76b946ded252" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_invoke_multi_condition_task</definition>
        <argsstring>(Worker &amp;, Node *, SmallVector&lt; int &gt; &amp;)</argsstring>
        <name>_invoke_multi_condition_task</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
          <defname>worker</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <param>
          <type><ref refid="classtf_1_1SmallVector" kindref="compound">SmallVector</ref>&lt; int &gt; &amp;</type>
          <defname>conds</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="734" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1588" bodyend="1594"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a4c5324657bf02bc2da0294192ab80233" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_invoke_module_task</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_invoke_module_task</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
          <defname>w</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="735" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1611" bodyend="1617"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a505ccafa7ab1855c200d5590499adf5a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_invoke_async_task</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_invoke_async_task</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
          <defname>w</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="736" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1620" bodyend="1624"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ae2bb8ef1456ec6414e46d7ed77628bd9" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_invoke_silent_async_task</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_invoke_silent_async_task</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
          <defname>w</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="737" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1627" bodyend="1631"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ae4be3b787a3c6eaaf18589a25e9c844f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_invoke_cudaflow_task</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_invoke_cudaflow_task</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
          <defname>worker</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="738" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1597" bodyend="1601"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ae7254966d36c26cdf59a11bc7bd4d43f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_invoke_syclflow_task</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_invoke_syclflow_task</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
          <defname>worker</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="739" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1604" bodyend="1608"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a97db97d741c5ed6f0a454aa89bd457d7" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_invoke_runtime_task</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_invoke_runtime_task</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
          <defname>w</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="740" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="1634" bodyend="1639"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a7c70d9c49d9a86756c3a2d445a68633a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::Executor::_loop_until</definition>
        <argsstring>(Worker &amp;, P &amp;&amp;)</argsstring>
        <name>_loop_until</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
          <defname>w</defname>
        </param>
        <param>
          <type>P &amp;&amp;</type>
          <defname>stop_predicate</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="743" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="975" bodyend="1013"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1aeeecfcac09ba22db0aeaf2f5b534b802" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="namespacetf_1adb8433555d8cdc0b3c5d95e8d51a90f0" kindref="member">is_cudaflow_task_v</ref>&lt; C &gt;, void &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::Executor::_invoke_cudaflow_task_entry</definition>
        <argsstring>(Node *, C &amp;&amp;)</argsstring>
        <name>_invoke_cudaflow_task_entry</name>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <param>
          <type>C &amp;&amp;</type>
          <defname>c</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="746" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cudaflow.hpp" bodystart="1704" bodyend="1723"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a42a995c2a5299761cf3c2e2d17cfca34" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>typename Q</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="namespacetf_1a574038aaa99e0220eedca4e8ea9389cf" kindref="member">is_syclflow_task_v</ref>&lt; C &gt;, void &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::Executor::_invoke_syclflow_task_entry</definition>
        <argsstring>(Node *, C &amp;&amp;, Q &amp;)</argsstring>
        <name>_invoke_syclflow_task_entry</name>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <param>
          <type>C &amp;&amp;</type>
          <defname>c</defname>
        </param>
        <param>
          <type>Q &amp;</type>
          <defname>queue</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="751" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/sycl/syclflow.hpp" bodystart="665" bodyend="680"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>class to create an executor for running a taskflow graph </para>    </briefdescription>
    <detaileddescription>
<para>An executor manages a set of worker threads to run one or multiple taskflows using an efficient work-stealing scheduling algorithm.</para><para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>Declare<sp/>an<sp/>executor<sp/>and<sp/>a<sp/>taskflow</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1Executor" kindref="compound">tf::Executor</ref><sp/>executor;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref><sp/>taskflow;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>three<sp/>tasks<sp/>into<sp/>the<sp/>taskflow</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1Task" kindref="compound">tf::Task</ref><sp/>A<sp/>=<sp/>taskflow.<ref refid="classtf_1_1FlowBuilder_1a60d7a666cab71ecfa3010b2efb0d6b57" kindref="member">emplace</ref>([]<sp/>()<sp/>{<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>TaskA\n&quot;</highlight><highlight class="normal">;<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1Task" kindref="compound">tf::Task</ref><sp/>B<sp/>=<sp/>taskflow.<ref refid="classtf_1_1FlowBuilder_1a60d7a666cab71ecfa3010b2efb0d6b57" kindref="member">emplace</ref>([]<sp/>()<sp/>{<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>TaskB\n&quot;</highlight><highlight class="normal">;<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1Task" kindref="compound">tf::Task</ref><sp/>C<sp/>=<sp/>taskflow.<ref refid="classtf_1_1FlowBuilder_1a60d7a666cab71ecfa3010b2efb0d6b57" kindref="member">emplace</ref>([]<sp/>()<sp/>{<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>TaskC\n&quot;</highlight><highlight class="normal">;<sp/>});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Build<sp/>precedence<sp/>between<sp/>tasks</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">A.<ref refid="classtf_1_1Task_1a8c78c453295a553c1c016e4062da8588" kindref="member">precede</ref>(B,<sp/>C);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1Future" kindref="compound">tf::Future&lt;void&gt;</ref><sp/>fu<sp/>=<sp/>executor.<ref refid="classtf_1_1Executor_1a519777f5783981d534e9e53b99712069" kindref="member">run</ref>(taskflow);</highlight></codeline>
<codeline><highlight class="normal">fu.wait();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>block<sp/>until<sp/>the<sp/>execution<sp/>completes</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">executor.<ref refid="classtf_1_1Executor_1a519777f5783981d534e9e53b99712069" kindref="member">run</ref>(taskflow,<sp/>[](){<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;end<sp/>of<sp/>1<sp/>run&quot;</highlight><highlight class="normal">;<sp/>}).wait();</highlight></codeline>
<codeline><highlight class="normal">executor.<ref refid="classtf_1_1Executor_1a6d0617eebc9421f1ba1f82ce6dd02c00" kindref="member">run_n</ref>(taskflow,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">executor.<ref refid="classtf_1_1Executor_1ab9aa252f70e9a40020a1e5a89d485b85" kindref="member">wait_for_all</ref>();<sp/><sp/></highlight><highlight class="comment">//<sp/>block<sp/>until<sp/>all<sp/>associated<sp/>executions<sp/>finish</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">executor.<ref refid="classtf_1_1Executor_1a6d0617eebc9421f1ba1f82ce6dd02c00" kindref="member">run_n</ref>(taskflow,<sp/>4,<sp/>[](){<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;end<sp/>of<sp/>4<sp/>runs&quot;</highlight><highlight class="normal">;<sp/>}).wait();</highlight></codeline>
<codeline><highlight class="normal">executor.<ref refid="classtf_1_1Executor_1a0f52e9dd64b65aba32ca0e13c1ed300a" kindref="member">run_until</ref>(taskflow,<sp/>[cnt=0]<sp/>()<sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>++cnt<sp/>==<sp/>10;<sp/>});</highlight></codeline>
</programlisting></para><para>All the <computeroutput>run</computeroutput> methods are <emphasis>thread-safe</emphasis>. You can submit multiple taskflows at the same time to an executor from different threads. </para>    </detaileddescription>
    <location file="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" line="50" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/core/executor.hpp" bodystart="50" bodyend="752"/>
    <listofallmembers>
      <member refid="classtf_1_1Executor_1a3a7524f412f7c7c328774135077f0498" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_cancel_invoke</name></member>
      <member refid="classtf_1_1Executor_1a417896b64fa0cdec764623d337b5f455" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_consume_graph</name></member>
      <member refid="classtf_1_1Executor_1a8728f22f6d177fad84ce667e02a7a3b9" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_decrement_topology</name></member>
      <member refid="classtf_1_1Executor_1a08945917285cd57d33efc99530fbd384" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_decrement_topology_and_notify</name></member>
      <member refid="classtf_1_1Executor_1a4b36b0a386f0eb5ba9cd3984c589a5c1" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_detach_dynamic_task</name></member>
      <member refid="classtf_1_1Executor_1a500d540a170f1da6e5247168bc6efa87" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_done</name></member>
      <member refid="classtf_1_1Executor_1a0b4f231e11016194980b14e76262c8a7" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_exploit_task</name></member>
      <member refid="classtf_1_1Executor_1aab7cc2e53d75fcc87fcc919f29bf9ca9" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_explore_task</name></member>
      <member refid="classtf_1_1Executor_1ab85dc42b3e9b18e4b975bd5e9a8c5e72" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_increment_topology</name></member>
      <member refid="classtf_1_1Executor_1ad16165142908aca9444ea88e65040219" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke</name></member>
      <member refid="classtf_1_1Executor_1a505ccafa7ab1855c200d5590499adf5a" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_async_task</name></member>
      <member refid="classtf_1_1Executor_1afa6be6aab23ff4b2a293a2245818916d" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_condition_task</name></member>
      <member refid="classtf_1_1Executor_1ae4be3b787a3c6eaaf18589a25e9c844f" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_cudaflow_task</name></member>
      <member refid="classtf_1_1Executor_1aeeecfcac09ba22db0aeaf2f5b534b802" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_cudaflow_task_entry</name></member>
      <member refid="classtf_1_1Executor_1a4a000baf70b108201e3787787309c272" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_dynamic_task</name></member>
      <member refid="classtf_1_1Executor_1a4c5324657bf02bc2da0294192ab80233" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_module_task</name></member>
      <member refid="classtf_1_1Executor_1a19b3f10d4eab40143d3f76b946ded252" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_multi_condition_task</name></member>
      <member refid="classtf_1_1Executor_1a97db97d741c5ed6f0a454aa89bd457d7" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_runtime_task</name></member>
      <member refid="classtf_1_1Executor_1ae2bb8ef1456ec6414e46d7ed77628bd9" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_silent_async_task</name></member>
      <member refid="classtf_1_1Executor_1ac243d2a08b5a4a75dd440dc063b886ce" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_static_task</name></member>
      <member refid="classtf_1_1Executor_1ae7254966d36c26cdf59a11bc7bd4d43f" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_syclflow_task</name></member>
      <member refid="classtf_1_1Executor_1a42a995c2a5299761cf3c2e2d17cfca34" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_syclflow_task_entry</name></member>
      <member refid="classtf_1_1Executor_1a7c70d9c49d9a86756c3a2d445a68633a" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_loop_until</name></member>
      <member refid="classtf_1_1Executor_1ac4a4632561a52d00a02d91296b20cb5a" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_MAX_STEALS</name></member>
      <member refid="classtf_1_1Executor_1ab92c39c4b59577cf4163c21ef2edb2f3" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_notifier</name></member>
      <member refid="classtf_1_1Executor_1aa987e2bddb791a78ece4e5693f018afb" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_num_actives</name></member>
      <member refid="classtf_1_1Executor_1a904e5d4f22bf5a72bc0af2a4c5f32a3e" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_num_thieves</name></member>
      <member refid="classtf_1_1Executor_1a9e38edfbc967dd3f5ca6f7a115f95ed7" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_num_topologies</name></member>
      <member refid="classtf_1_1Executor_1a9cd8c1a72af4477bc0f9575b68ffb16a" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_observer_epilogue</name></member>
      <member refid="classtf_1_1Executor_1ae023614977a19def9e04cf7212eab65b" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_observer_prologue</name></member>
      <member refid="classtf_1_1Executor_1ad7f083460df992b1186f83ac99481a57" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_observers</name></member>
      <member refid="classtf_1_1Executor_1ab8d98f12a62d10ad6cf1a4011a4d0034" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_schedule</name></member>
      <member refid="classtf_1_1Executor_1a685c08b62a494359e34c6de2a700fdab" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_schedule</name></member>
      <member refid="classtf_1_1Executor_1a9cf973d7c5310d058fee003fda9098c4" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_schedule</name></member>
      <member refid="classtf_1_1Executor_1a8f8202cfea57480f304d1652358386d3" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_schedule</name></member>
      <member refid="classtf_1_1Executor_1a723daf897c5d3d3517583cb4c62654ee" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_set_up_topology</name></member>
      <member refid="classtf_1_1Executor_1a8aee6c0ec55b4bfb3909601203e98514" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_spawn</name></member>
      <member refid="classtf_1_1Executor_1a9707dbbe643016ac2e515aada9ebfcf3" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_taskflow_mutex</name></member>
      <member refid="classtf_1_1Executor_1a63090414fbad15f5934838d21aa0a28f" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_taskflows</name></member>
      <member refid="classtf_1_1Executor_1a42e7db3fc43e1c5479e30e8d83da9e74" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_tear_down_async</name></member>
      <member refid="classtf_1_1Executor_1a17fe8e0f32892cf2848611bca7566378" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_tear_down_invoke</name></member>
      <member refid="classtf_1_1Executor_1a76be884d38d1bb8f9b8bba488c901b4b" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_tear_down_topology</name></member>
      <member refid="classtf_1_1Executor_1a941f6e5e9e6141a81c750648c4802b63" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_this_worker</name></member>
      <member refid="classtf_1_1Executor_1a3b5e7cf6749feded228a46e9fbfdef5f" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_threads</name></member>
      <member refid="classtf_1_1Executor_1a94357ea08db1859178f855b0b926b3de" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_topology_cv</name></member>
      <member refid="classtf_1_1Executor_1a8be5571fa0df99784aacb26b01d0f4b4" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_topology_mutex</name></member>
      <member refid="classtf_1_1Executor_1a57f5105dc812d83f259ec8cab7c96228" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_wait_for_task</name></member>
      <member refid="classtf_1_1Executor_1a6704efd89fdcf46bd388b2e83c5def9f" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_wids</name></member>
      <member refid="classtf_1_1Executor_1a9b123d06eb807bf275ba761938624afc" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_worker_interface</name></member>
      <member refid="classtf_1_1Executor_1ad93162f032d463cc845fbca4fc0d960e" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_workers</name></member>
      <member refid="classtf_1_1Executor_1a21685ee0442fbbd635e7134d6a0afe1c" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_wsq</name></member>
      <member refid="classtf_1_1Executor_1ad031630f03103157f807d85a174d08cb" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_wsq_mutex</name></member>
      <member refid="classtf_1_1Executor_1a1e6866c8f1b6a2e932f06d0b4eb032c0" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>async</name></member>
      <member refid="classtf_1_1Executor_1a23b4c858279616d79612dccd9a715365" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>Executor</name></member>
      <member refid="classtf_1_1Executor_1a61184f9bd9c801d0a5eccecfdbddc641" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>FlowBuilder</name></member>
      <member refid="classtf_1_1Executor_1afbff30c324c5887aace09e7fe9a0d607" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>loop_until</name></member>
      <member refid="classtf_1_1Executor_1aff77def96ae740d648dd84e571237c83" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>make_observer</name></member>
      <member refid="classtf_1_1Executor_1ad83b1bbb987709e797ba3f627493c37c" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>max_steals</name></member>
      <member refid="classtf_1_1Executor_1a51acee1670e9f246c7ccd7f6a63f1524" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>named_async</name></member>
      <member refid="classtf_1_1Executor_1a1febfaa7a99cac8466263c58fd2a7c06" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>named_silent_async</name></member>
      <member refid="classtf_1_1Executor_1affec621aae59d73fc188ef454008fda2" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>num_observers</name></member>
      <member refid="classtf_1_1Executor_1a5fb438dc0f7b9e1ae2fe3f240c82f174" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>num_taskflows</name></member>
      <member refid="classtf_1_1Executor_1a6d6c28ed58211e4c27a99571e5bf0b6c" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>num_topologies</name></member>
      <member refid="classtf_1_1Executor_1a9d2d464ab2a84ecb3b3ea7747e8e276b" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>num_workers</name></member>
      <member refid="classtf_1_1Executor_1a31081f492c376f7b798de0e430534531" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>remove_observer</name></member>
      <member refid="classtf_1_1Executor_1a519777f5783981d534e9e53b99712069" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run</name></member>
      <member refid="classtf_1_1Executor_1a4bbef53618db1852003a0cd1e1e40c50" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run</name></member>
      <member refid="classtf_1_1Executor_1ac01c2f31dd3ed3b4dfa1a6c933a58b2f" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run</name></member>
      <member refid="classtf_1_1Executor_1a52c27df2fb7372277f4926f4ab0a0937" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run</name></member>
      <member refid="classtf_1_1Executor_1ab05ad34c59cf11a7c4de82cf58bba91e" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run_and_wait</name></member>
      <member refid="classtf_1_1Executor_1a6d0617eebc9421f1ba1f82ce6dd02c00" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run_n</name></member>
      <member refid="classtf_1_1Executor_1ad10a12c9e14c8132e414c9a48443d938" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run_n</name></member>
      <member refid="classtf_1_1Executor_1abd99b189457d1a00a33cd22339694fcd" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run_n</name></member>
      <member refid="classtf_1_1Executor_1ad14430ac62f0e64e9e21712ba35c22ea" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run_n</name></member>
      <member refid="classtf_1_1Executor_1a0f52e9dd64b65aba32ca0e13c1ed300a" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run_until</name></member>
      <member refid="classtf_1_1Executor_1ab10fac2869d80049e5a75d2084a78eda" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run_until</name></member>
      <member refid="classtf_1_1Executor_1af84856e5c4c605fcb3cbfbcad069a6a8" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run_until</name></member>
      <member refid="classtf_1_1Executor_1af30c6947f060e4bdf344e90b6b44fc70" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run_until</name></member>
      <member refid="classtf_1_1Executor_1af3d14e26ba8af9e6cc5a32aad8446de7" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>Runtime</name></member>
      <member refid="classtf_1_1Executor_1abf71e7ec0026ddfce79c912264369bc9" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>silent_async</name></member>
      <member refid="classtf_1_1Executor_1aa48945297ede77a161defc88033ce8a6" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>Subflow</name></member>
      <member refid="classtf_1_1Executor_1a6487d589cb1f6b078b69fd3bb1082345" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>this_worker_id</name></member>
      <member refid="classtf_1_1Executor_1ab9aa252f70e9a40020a1e5a89d485b85" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>wait_for_all</name></member>
      <member refid="classtf_1_1Executor_1a5a511b0cc23b264826373d3dabcef670" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>~Executor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
